function varargout = time_stamp(varargin)
% M-File changed by desGUIDE 
% varargin   command line arguments to time_stamp (see VARARGIN)

%	Copyright (c) 2004-2006 by J. Luis
%
%	This program is free software; you can redistribute it and/or modify
%	it under the terms of the GNU General Public License as published by
%	the Free Software Foundation; version 2 of the License.
%
%	This program is distributed in the hope that it will be useful,
%	but WITHOUT ANY WARRANTY; without even the implied warranty of
%	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%	GNU General Public License for more details.
%
%	Contact info: w3.ualg.pt/~jluis/mirone
% --------------------------------------------------------------------
 
hObject = figure('Tag','figure1','Visible','off');
handles = guihandles(hObject);
guidata(hObject, handles);
time_stamp_LayoutFcn(hObject,handles);
handles = guihandles(hObject);
 
handles.command = cell(15,1);
handles.command{3} = ['-U'];
set(handles.edit_ShowCommand, 'String', [handles.command{3}]);

% Reposition the window on screen
movegui(hObject,'northwest')

% Choose default command line output for time_stamp_export
handles.output = hObject;
guidata(hObject, handles);

set(hObject,'Visible','on');
% UIWAIT makes time_stamp_export wait for user response (see UIRESUME)
uiwait(handles.figure1);

handles = guidata(hObject);
out = time_stamp_OutputFcn(hObject, [], handles);
varargout{1} = out;

% --- Outputs from this function are returned to the command line.
function varargout = time_stamp_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% handles    structure with handles and user data (see GUIDATA)
% Get default command line output from handles structure
varargout{1} = handles.output;
% The figure can be deleted now
delete(handles.figure1);

function edit_Xpos_Callback(hObject, eventdata, handles)
xx = get(hObject,'String');
if isempty(xx)
    set(hObject,'String','0.0');    handles.command{5} = ['0.0'];
else
    handles.command{4} = ['/']; handles.command{5} = [xx];      handles.command{7} = ['/'];
    handles.command{8} = get(handles.edit_Ypos,'String');       handles.command{10} = ['/'];
end
set(handles.edit_ShowCommand, 'String', [handles.command{3:end}]);
guidata(hObject, handles);

function edit_Ypos_Callback(hObject, eventdata, handles)
xx = get(hObject,'String');
if isempty(xx)
    set(hObject,'String','-2.5');  handles.command{8} = ['-2.5'];
else
    handles.command{8} = [xx];      handles.command{7} = ['/'];       handles.command{10} = ['/'];
    handles.command{5} = get(handles.edit_Xpos,'String');
end
set(handles.edit_ShowCommand, 'String', [handles.command{3:end}]);
guidata(hObject, handles);

% --- Executes on selection change in popup_Unities.
function popup_Unities_Callback(hObject, eventdata, handles)
val = get(hObject,'Value');     str = get(hObject, 'String');
switch str{val};
    case 'centimeter'
        if ~isempty(get(handles.edit_Xpos,'String')) & ~isempty(get(handles.edit_Ypos,'String'))
            handles.command{5} = [get(handles.edit_Xpos,'String')];     handles.command{4} = ['/'];
            handles.command{6} = ['c'];     handles.command{7} = ['/'];
            handles.command{8} = [get(handles.edit_Ypos,'String')];
            handles.command{9} = ['c'];     handles.command{10} = ['/'];
        end
    case 'inch'
        if ~isempty(get(handles.edit_Xpos,'String')) & ~isempty(get(handles.edit_Ypos,'String'))
            handles.command{5} = [get(handles.edit_Xpos,'String')];     handles.command{4} = ['/'];
            handles.command{6} = ['i'];     handles.command{7} = ['/'];
            handles.command{8} = [get(handles.edit_Ypos,'String')];
            handles.command{9} = ['i'];     handles.command{10} = ['/'];
        end
    case 'meter'
        if ~isempty(get(handles.edit_Xpos,'String')) & ~isempty(get(handles.edit_Ypos,'String'))
            handles.command{5} = [get(handles.edit_Xpos,'String')];     handles.command{4} = ['/'];
            handles.command{6} = ['m'];     handles.command{7} = ['/'];
            handles.command{8} = [get(handles.edit_Ypos,'String')];
            handles.command{9} = ['m'];     handles.command{10} = ['/'];
        end
    case ''
        if ~isempty(get(handles.edit_Xpos,'String')) & ~isempty(get(handles.edit_Ypos,'String'))
            handles.command{5} = [get(handles.edit_Xpos,'String')];     handles.command{4} = ['/'];
            handles.command{6} = [''];     handles.command{7} = ['/'];
            handles.command{8} = [get(handles.edit_Ypos,'String')];
            handles.command{9} = [''];     handles.command{10} = ['/'];
        end
end
set(handles.edit_ShowCommand, 'String', [handles.command{3:end}]);
guidata(hObject, handles);

function edit_Label_Callback(hObject, eventdata, handles)
xx = get(hObject,'String');
if ~isempty(xx)
    handles.command{11} = ['"' xx '"'];     handles.command{10} = ['/'];
    set(handles.checkbox_PlotCommand,'Value',0)
else
    handles.command{11} = [''];
end
if isempty(handles.command{5}) & isempty(handles.command{8})
    handles.command{10} = [''];
end
set(handles.edit_ShowCommand, 'String', [handles.command{3:end}]);
guidata(hObject, handles);

% --- Executes on button press in checkbox_PlotCommand.
function checkbox_PlotCommand_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    handles.command{11} = ['c'];    handles.command{10} = ['/'];
    set(handles.edit_Label,'String','')
else
    handles.command{11} = [''];
end
if isempty(handles.command{5}) & isempty(handles.command{8})
    handles.command{10} = [''];
end
set(handles.edit_ShowCommand, 'String', [handles.command{3:end}]);
guidata(hObject, handles);

function edit_ShowCommand_Callback(hObject, eventdata, handles)

% --- Executes on button press in pushbutton_Cancel.
function pushbutton_Cancel_Callback(hObject, eventdata, handles)
handles.output = '';        % User gave up, return nothing
guidata(hObject, handles);
uiresume(handles.figure1);

% --- Executes on button press in pushbutton_OK.
function pushbutton_OK_Callback(hObject, eventdata, handles)
handles.output = get(handles.edit_ShowCommand, 'String');
guidata(hObject,handles);
uiresume(handles.figure1);

% --- Executes on button press in pushbutton_Help.
function pushbutton_Help_Callback(hObject, eventdata, handles)
message = {'Draw a time stamp on plot. User may specify where the lower left corner of'
    'the stamp should fall on the page relative to lower left corner of plot.'
    'Optionally, append a label (e.g. your sinature), or select to plot the'
    'command string. The GMT parameters UNIX_TIME and UNIX_TIME_POS'
    'can affect the appearance; see the gmtdefaults man page for details.'};
helpdlg(message,'Help on Time Stamp');

% --- Executes when user attempts to close figure1.
function figure1_CloseRequestFcn(hObject, eventdata, handles)
% Hint: delete(hObject) closes the figure
if isequal(get(handles.figure1, 'waitstatus'), 'waiting')
    % The GUI is still in UIWAIT, us UIRESUME
    handles.output = '';        % User gave up, return nothing
    guidata(hObject, handles);
    uiresume(handles.figure1);
else
    % The GUI is no longer waiting, just close it
    handles.output = '';        % User gave up, return nothing
    guidata(hObject, handles);
    delete(handles.figure1);
end

% --- Executes on key press over figure1 with no controls selected.
function figure1_KeyPressFcn(hObject, eventdata, handles)
% Check for "enter" or "escape"
if isequal(get(hObject,'CurrentKey'),'escape')
    handles.output = '';    % User said no by hitting escape
    guidata(hObject, handles);
    uiresume(handles.figure1);
end   
if isequal(get(hObject,'CurrentKey'),'return')
    handles.output = '';        % User gave up, return nothing
    guidata(hObject, handles);
    uiresume(handles.figure1);
end


% --- Creates and returns a handle to the GUI figure. 
function time_stamp_LayoutFcn(h1,handles);

set(h1,...
'CloseRequestFcn',{@figure1_CloseRequestFcn,handles},...
'Color',get(0,'factoryUicontrolBackgroundColor'),...
'KeyPressFcn',{@figure1_KeyPressFcn,handles},...
'MenuBar','none',...
'Name','time_stamp',...
'NumberTitle','off',...
'Position',[520 638 292 162],...
'Resize','off',...
'Tag','figure1',...
'UserData',[]);

setappdata(h1, 'GUIDEOptions',struct(...
'active_h', [], ...
'taginfo', struct(...
'figure', 2, ...
'edit', 5, ...
'popupmenu', 2, ...
'checkbox', 2, ...
'pushbutton', 4, ...
'text', 5), ...
'override', 0, ...
'release', 13, ...
'resize', 'none', ...
'accessibility', 'callback', ...
'mfile', 1, ...
'callbacks', 1, ...
'singleton', 1, ...
'syscolorfig', 1, ...
'blocking', 0, ...
'lastSavedFile', 'D:\m_gmt\time_stamp.m'));


h2 = uicontrol(...
'Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@time_stamp_uicallback,h1,'edit_Xpos_Callback'},...
'HorizontalAlignment','left',...
'Position',[51 135 47 21],...
'String','0.0',...
'Style','edit',...
'TooltipString','X Time Stamp position',...
'Tag','edit_Xpos');


h3 = uicontrol(...
'Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@time_stamp_uicallback,h1,'edit_Ypos_Callback'},...
'HorizontalAlignment','left',...
'Position',[171 134 47 21],...
'String','-2.5',...
'Style','edit',...
'TooltipString','Y Time Stamp position',...
'Tag','edit_Ypos');


h4 = uicontrol(...
'Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@time_stamp_uicallback,h1,'popup_Unities_Callback'},...
'Position',[51 106 82 22],...
'String',{  ''; 'centimeter'; 'inch'; 'meter' },...
'Style','popupmenu',...
'TooltipString','Measure unities used in Time Stamp positioning',...
'Value',1,...
'Tag','popup_Unities');


h5 = uicontrol(...
'Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@time_stamp_uicallback,h1,'edit_Label_Callback'},...
'HorizontalAlignment','left',...
'Position',[51 82 231 21],...
'Style','edit',...
'TooltipString','Plot this label (e.g. your signature)',...
'Tag','edit_Label');


h6 = uicontrol(...
'Parent',h1,...
'Callback',{@time_stamp_uicallback,h1,'checkbox_PlotCommand_Callback'},...
'Position',[51 60 116 15],...
'String','Plot command string',...
'Style','checkbox',...
'TooltipString','Plot the full GMT command string',...
'Tag','checkbox_PlotCommand');


h7 = uicontrol(...
'Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@time_stamp_uicallback,h1,'edit_ShowCommand_Callback'},...
'HorizontalAlignment','left',...
'Position',[51 35 231 21],...
'Style','edit',...
'TooltipString','Show the correspoding GMT command',...
'Tag','edit_ShowCommand');


h8 = uicontrol(...
'Parent',h1,...
'Callback',{@time_stamp_uicallback,h1,'pushbutton_Cancel_Callback'},...
'Position',[142 6 66 23],...
'String','Cancel',...
'Tag','pushbutton_Cancel');


h9 = uicontrol(...
'Parent',h1,...
'Callback',{@time_stamp_uicallback,h1,'pushbutton_OK_Callback'},...
'Position',[216 6 66 23],...
'String','OK',...
'Tag','pushbutton_OK');

h10 = uicontrol(...
'Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[11 84 33 18],...
'String','Label',...
'Style','text',...
'Tag','text1');


h11 = uicontrol(...
'Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[10 139 40 15],...
'String','X origin',...
'Style','text',...
'Tag','text2');


h12 = uicontrol(...
'Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[130 137 40 15],...
'String','Y origin',...
'Style','text',...
'Tag','text3');

h13 = uicontrol(...
'Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[11 110 32 15],...
'String','Unities',...
'Style','text',...
'Tag','text4');

h14 = uicontrol(...
'Parent',h1,...
'Callback',{@time_stamp_uicallback,h1,'pushbutton_Help_Callback'},...
'FontWeight','bold',...
'ForegroundColor',[0 0 1],...
'Position',[261 115 21 41],...
'String','?',...
'Tag','pushbutton_Help');

function time_stamp_uicallback(hObject, eventdata, h1, callback_name)
% This function is executed by the callback and than the handles is allways updated.
feval(callback_name,hObject,[],guidata(h1));
