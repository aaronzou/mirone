function varargout = grdsample_mir(varargin)
% Helper window to interface with grdsample MEX 

%	Copyright (c) 2004-2013 by J. Luis
%
% 	This program is part of Mirone and is free software; you can redistribute
% 	it and/or modify it under the terms of the GNU Lesser General Public
% 	License as published by the Free Software Foundation; either
% 	version 2.1 of the License, or any later version.
% 
% 	This program is distributed in the hope that it will be useful,
% 	but WITHOUT ANY WARRANTY; without even the implied warranty of
% 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
% 	Lesser General Public License for more details.
%
%	Contact info: w3.ualg.pt/~jluis/mirone
% --------------------------------------------------------------------

% $Id$

	if isempty(varargin)
		errordlg('GRDSAMPLE: wrong number of input arguments.','Error'),	return
	end
 
	hObject = figure('Vis','off');
	grdsample_mir_LayoutFcn(hObject);
	handles = guihandles(hObject);

	handMir  = varargin{1};
	handles.Z = getappdata(handMir.figure1,'dem_z');
	move2side(handMir.figure1, hObject,'right')
    
	if (handMir.no_file)
		errordlg('GRDSAMPLE: You didn''t even load a file. What are you expecting then?','ERROR')
        delete(hObject);    return
	end
	if (~handMir.validGrid)
        errordlg('GRDSAMPLE: This operation is deffined only for images derived from DEM grids.','ERROR')
        delete(hObject);    return
	end
	if (isempty(handles.Z))
        errordlg('GRDSAMPLE: Grid was not saved in memory. Increase "Grid max size" and start over.','ERROR')
        delete(hObject);    return
	end

	handles.x_min = [];			handles.x_max = [];
	handles.y_min = [];			handles.y_max = [];
	handles.x_inc = [];			handles.y_inc = [];
	handles.dms_xinc = 0;		handles.dms_yinc = 0;
	handles.bd_cond = [];
    handles.nr_or = size(handles.Z,1);
    handles.nc_or = size(handles.Z,2);
    handles.hMirFig = handMir.figure1;

	%-----------
	% Fill in the grid limits boxes with calling fig values and save some limiting value
    head = handMir.head;
	set(handles.edit_x_min,'String',sprintf('%.8g',head(1)))
	set(handles.edit_x_max,'String',sprintf('%.8g',head(2)))
	set(handles.edit_y_min,'String',sprintf('%.8g',head(3)))
	set(handles.edit_y_max,'String',sprintf('%.8g',head(4)))
	handles.x_min = head(1);            handles.x_max = head(2);
	handles.y_min = head(3);            handles.y_max = head(4);
	handles.x_min_or = head(1);         handles.x_max_or = head(2);
	handles.y_min_or = head(3);         handles.y_max_or = head(4);
	handles.one_or_zero = ~head(7);

	% Fill in the x,y_inc and nrow,ncol boxes
	set(handles.edit_Nrows,'String',sprintf('%d',handles.nr_or))
	set(handles.edit_Ncols,'String',sprintf('%d',handles.nc_or))
	set(handles.edit_y_inc,'String',sprintf('%.10g',head(9)))
	set(handles.edit_x_inc,'String',sprintf('%.10g',head(8)))
	handles.x_inc = head(8);    handles.y_inc = head(9);
	handles.head = head;
	%----------------

	%------------ Give a Pro look (3D) to the frame boxes  -------------------------------
	new_frame3D(hObject, handles.GLG, handles.frame1)
	%------------- END Pro look (3D) -----------------------------------------------------

	% Add this figure handle to the carraças list
	plugedWin = getappdata(handles.hMirFig,'dependentFigs');
	plugedWin = [plugedWin hObject];
	setappdata(handles.hMirFig,'dependentFigs',plugedWin);

	guidata(hObject, handles);

	set(hObject,'Visible','on');
	if (strncmp(computer,'PC',2))
		WindowAPI(hObject, 'TopMost')
	end
	if (nargout),   varargout{1} = hObject;     end

% --------------------------------------------------------------------
function edit_x_min_CB(hObject, handles)
	dim_funs('xMin', hObject, handles)

% --------------------------------------------------------------------
function edit_x_max_CB(hObject, handles)
	dim_funs('xMax', hObject, handles)

% --------------------------------------------------------------------
function edit_y_min_CB(hObject, handles)
	dim_funs('yMin', hObject, handles)

% --------------------------------------------------------------------
function edit_y_max_CB(hObject, handles)
	dim_funs('yMax', hObject, handles)

% --------------------------------------------------------------------
function edit_x_inc_CB(hObject, handles)
	dim_funs('xInc', hObject, handles)

% --------------------------------------------------------------------
function edit_Ncols_CB(hObject, handles)
	dim_funs('nCols', hObject, handles)

% --------------------------------------------------------------------
function edit_y_inc_CB(hObject, handles)
	dim_funs('yInc', hObject, handles)

% --------------------------------------------------------------------
function edit_Nrows_CB(hObject, handles)
	dim_funs('nRows', hObject, handles)

% --------------------------------------------------------------------
function push_Help_R_F_T_CB(hObject, handles)
	message = {'Min and Max, of "X Direction" and "Y Direction" specify the Region of'
        'interest. To specify boundaries in degrees and minutes [and seconds],'
        'use the dd:mm[:ss.xx] format.'
        '"Spacing" sets the grid size for grid output. You may choose different'
        'spacings for X and Y. Also here you can use the dd:mm[:ss.xx] format.'
        'In "#of lines" it is offered the easyeast way of controling the grid'
        'dimensions (lines & columns).'};
	helpdlg(message,'Help on Grid Line Geometry');

% --------------------------------------------------------------------
function popup_BoundaryCondition_CB(hObject, handles)
	val = get(hObject,'Value');     str = get(hObject, 'String');
	switch str{val};
        case ' ',        handles.bd_cond = [];
        case '',         handles.bd_cond = [];
        case 'x',        handles.bd_cond = '-Lx';
        case 'y',        handles.bd_cond = '-Ly';
        case 'xy',       handles.bd_cond = '-Lxy'; 
        case 'g',        handles.bd_cond = '-Lg';
	end
	guidata(hObject, handles);

% --------------------------------------------------------------------
function push_Help_L_CB(hObject, handles)
	message = {'Boundary condition flag may be "x" or "y" or "xy" indicating data is periodic'
               'in range of x or y or both set by the grids limits in the above boxes,'
               'or flag may be "g" indicating geographical conditions (x and y may be'
               'lon and lat). [Default is no boundary conditions].'};
	helpdlg(message,'Help -L option');

% --------------------------------------------------------------------
function push_OK_CB(hObject, handles)
	opt_R = ' ';     opt_N = ' ';     opt_Q = ' ';     opt_L = ' ';
    n_set = 0;
	x_min = get(handles.edit_x_min,'String');   x_max = get(handles.edit_x_max,'String');
	y_min = get(handles.edit_y_min,'String');   y_max = get(handles.edit_y_max,'String');
	if isempty(x_min) || isempty(x_max) || isempty(y_min) || isempty(y_max)
        errordlg('One or more grid limits are empty. Try with your yes open.','Error');    return
	end

	nx = str2double(get(handles.edit_Ncols,'String'));
	ny = str2double(get(handles.edit_Nrows,'String'));
	if (isnan(nx) || isnan(ny))      % I think this was already tested, but ...
        errordlg('One (or two) of the grid dimensions are not valid. Do your best.','Error');   return
	end

	if (nx ~= handles.nc_or || ny ~= handles.nr_or)
        opt_N = ['-N' get(handles.edit_Ncols,'String') '/' get(handles.edit_Nrows,'String')];
        n_set = 1;
	end

	if (get(handles.checkbox_Option_Q,'Value')),    opt_Q = '-Q';   end
	if (~isempty(handles.bd_cond)),     opt_L = handles.bd_cond;    end

	% See if grid limits were changed
	if ( (abs(handles.x_min-handles.x_min_or) > 1e-5) || (abs(handles.x_max-handles.x_max_or) > 1e-5) || ...
            (abs(handles.y_min-handles.y_min_or) > 1e-5) || (abs(handles.y_max-handles.y_max_or) > 1e-5))
        opt_R = sprintf('-R%.12g/%.12g/%.12g/%.12g',handles.x_min, handles.x_max, handles.y_min, handles.y_max);
        x_min = handles.x_min;    x_max = handles.x_max;
        y_min = handles.y_min;    y_max = handles.y_max;
        if (~n_set)     % Only limits had changed, but we need also to return the -N option
            opt_N = ['-N' get(handles.edit_Ncols,'String') '/' get(handles.edit_Nrows,'String')];
            n_set = 1;
        end
	end

	if (~n_set)
        errordlg('You haven''t select anything usefull to do.','Chico Clever');   return
	end

	set(handles.figure1,'pointer','watch');	    set(handles.hMirFig,'pointer','watch')
	newZ = grdsample_m(handles.Z, handles.head, opt_R, opt_N, opt_Q, opt_L);
	zMinMax = grdutils(newZ,'-L');	    [ny,nx] = size(newZ);
	set(handles.figure1,'pointer','arrow');	    set(handles.hMirFig,'pointer','arrow')
    new_head = [handles.head(1:4) zMinMax(1:2)' handles.head(7)];
	if (~strcmp(opt_R,' '))       % Grid limits did change
        new_head(1:4) = [x_min x_max y_min y_max];    
	end
    x_inc = (new_head(2) - new_head(1)) / (nx - ~handles.head(7));
    y_inc = (new_head(4) - new_head(3)) / (ny - ~handles.head(7));
    new_head(8:9) = [x_inc y_inc];
    tmp.X = linspace(new_head(1),new_head(2),nx);       tmp.Y = linspace(new_head(3),new_head(4),ny);
    tmp.head = new_head;
    tmp.name = 'Resampled grid';
    mirone(newZ,tmp);
    figure(handles.figure1)         % Don't let this figure forgotten behind the newly created one

% --------------------------------------------------------------------
% --- Executes on key press over figure1 with no controls selected.
function figure1_KeyPressFcn(hObject, handles)
	if isequal(get(hObject,'CurrentKey'),'escape')      % Check for "escape"
		delete(handles.figure1);
	end

% --- Creates and returns a handle to the GUI figure. 
function grdsample_mir_LayoutFcn(h1)

set(h1,...
'PaperUnits',get(0,'defaultfigurePaperUnits'),...
'Color',get(0,'factoryUicontrolBackgroundColor'),...
'KeyPressFcn',@figure1_KeyPressFcn,...
'MenuBar','none',...
'Name','Grdsample',...
'NumberTitle','off',...
'Position',[265.8 398.9 441 158],...
'RendererMode','manual',...
'Resize','off',...
'Tag','figure1');

uicontrol('Parent',h1,'Enable','inactive','Position',[10 75 421 75],'Style','frame', 'Tag', 'frame1');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[30 142 125 15],...
'String','Griding Line Geometry',...
'Style','text',...
'Tag','GLG');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','left',...
'Position',[77 111 80 21],...
'Style','edit',...
'Tag','edit_x_min');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','left',...
'Position',[163 111 80 21],...
'Style','edit',...
'Tag','edit_x_max');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','left',...
'Position',[77 85 80 21],...
'Style','edit',...
'Tag','edit_y_min');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','left',...
'Position',[163 85 80 21],...
'Style','edit',...
'Tag','edit_y_max');

uicontrol('Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[22 115 55 15],...
'String','X Direction',...
'Style','text');

uicontrol('Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[21 89 55 15],...
'String','Y Direction',...
'Style','text',...
'Tag','text3');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[183 132 41 13],...
'String','Max',...
'Style','text');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[99 132 41 13],...
'String','Min',...
'Style','text');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','left',...
'Position',[248 111 71 21],...
'Style','edit',...
'TooltipString','DX grid spacing',...
'Tag','edit_x_inc');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','left',...
'Position',[248 85 71 21],...
'Style','edit',...
'TooltipString','DY grid spacing',...
'Tag','edit_y_inc');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','center',...
'Position',[324 111 65 21],...
'Style','edit',...
'TooltipString','Number of columns in the grid',...
'Tag','edit_Ncols');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','center',...
'Position',[324 85 65 21],...
'Style','edit',...
'Tooltip','Number of columns in the grid',...
'Tag','edit_Nrows');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[265 133 41 13],...
'String','Spacing',...
'Style','text');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[332 133 51 13],...
'String','# of lines',...
'Style','text');

uicontrol('Parent',h1,...
'BackgroundColor',[0.8313725591 0.815686285495758 0.7843137383461],...
'Call',@grdsample_mir_uiCB,...
'FontWeight','bold',...
'ForegroundColor',[0 0 1],...
'Position',[400 84 21 48],...
'String','?',...
'Tag','push_Help_R_F_T');

uicontrol('Parent',h1,...
'Position',[221 42 140 15],...
'String','Bilinear interpolation',...
'Style','checkbox',...
'Tooltip','Use bilinear rather than bicubic interpolation',...
'Tag','checkbox_Option_Q');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',@grdsample_mir_uiCB,...
'HorizontalAlignment','right',...
'Position',[114 39 47 21],...
'String',{' '; 'x'; 'y'; 'xy'; 'g' },...
'Style','popupmenu',...
'Value',1,...
'Tag','popup_BoundaryCondition');

uicontrol('Parent',h1,...
'Call',@grdsample_mir_uiCB,...
'FontWeight','bold',...
'ForegroundColor',[0 0 1],...
'Position',[172 38 21 23],...
'String','?',...
'Tag','push_Help_L');

uicontrol('Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[17 41 95 16],...
'String','Boundary condition',...
'Style','text');

uicontrol('Parent',h1,...
'Call',@grdsample_mir_uiCB,...
'Position',[365 8 66 21],...
'String','OK',...
'Tag','push_OK');

function grdsample_mir_uiCB(hObject, eventdata)
% This function is executed by the callback and than the handles is allways updated.
	feval([get(hObject,'Tag') '_CB'],hObject, guidata(hObject));
