function varargout = ml_clip(varargin)
% M-File changed by desGUIDE 
% varargin   command line arguments to ml_clip (see VARARGIN)

%	Copyright (c) 2004-2006 by J. Luis
%
%	This program is free software; you can redistribute it and/or modify
%	it under the terms of the GNU General Public License as published by
%	the Free Software Foundation; version 2 of the License.
%
%	This program is distributed in the hope that it will be useful,
%	but WITHOUT ANY WARRANTY; without even the implied warranty of
%	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%	GNU General Public License for more details.
%
%	Contact info: w3.ualg.pt/~jluis/mirone
% --------------------------------------------------------------------
 
hObject = figure('Tag','figure1','Visible','off');
handles = guihandles(hObject);
guidata(hObject, handles);
ml_clip_LayoutFcn(hObject,handles);
handles = guihandles(hObject);
 
handles.above_val = [];
handles.below_val = [];

if ~isempty(varargin)       % 
    handles.z_min = varargin{1};
    handles.z_max = varargin{2};
    handles.above = handles.z_max;
    handles.below = handles.z_min;
    set(handles.edit_above,'String',num2str(handles.z_max))
    set(handles.edit_below,'String',num2str(handles.z_min))
end

movegui(hObject,'north')

% Choose default command line output for ml_clip_export
handles.output = hObject;
guidata(hObject, handles);

set(hObject,'Visible','on');
% UIWAIT makes ml_clip_export wait for user response (see UIRESUME)
uiwait(handles.figure1);

handles = guidata(hObject);
out = ml_clip_OutputFcn(hObject, [], handles);
varargout{1} = out;

% --- Outputs from this function are returned to the command line.
function varargout = ml_clip_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure

% Get default command line output from handles structure
varargout{1} = handles.output;
% The figure can be deleted now
delete(handles.figure1);

% --- Executes during object creation, after setting all properties.
function edit_above_Callback(hObject, eventdata, handles)
xx = str2double(get(hObject,'String'));
if ~isnan(xx) & xx < handles.z_max,     handles.above = xx;
else                                    set(hObject,'String',num2str(handles.z_max));   end
guidata(hObject,handles)

% --- Executes during object creation, after setting all properties.
function edit_Ab_val_Callback(hObject, eventdata, handles)
handles.above_val = str2double(get(hObject,'String'));
guidata(hObject,handles)

% --- Executes during object creation, after setting all properties.
function edit_below_Callback(hObject, eventdata, handles)
xx = str2double(get(hObject,'String'));
if ~isnan(xx) & xx > handles.z_min,     handles.below = xx;
else                                    set(hObject,'String',num2str(handles.z_min));   end
guidata(hObject,handles)


% --- Executes during object creation, after setting all properties.
function edit_Bl_val_Callback(hObject, eventdata, handles)
handles.below_val = str2double(get(hObject,'String'));
guidata(hObject,handles)

% --- Executes on button press in pushbutton_OK.
function pushbutton_OK_Callback(hObject, eventdata, handles)
Out{1} = handles.above;             Out{3} = handles.below;
Out{2} = handles.above_val;         Out{4} = handles.below_val;
handles.output = Out;               guidata(hObject,handles)
uiresume(handles.figure1);

% --- Executes on button press in pushbutton_Cancel.
function pushbutton_Cancel_Callback(hObject, eventdata, handles)
handles.output = [];        % User gave up, return nothing
guidata(hObject, handles);  uiresume(handles.figure1);

% --- Executes on button press in pushbutton_help.
function pushbutton_help_Callback(hObject, eventdata, handles)

% --- Executes when user attempts to close figure1.
function figure1_CloseRequestFcn(hObject, eventdata, handles)
if isequal(get(handles.figure1, 'waitstatus'), 'waiting')
    % The GUI is still in UIWAIT, us UIRESUME
    handles.output = [];        % User gave up, return nothing
    guidata(hObject, handles);    uiresume(handles.figure1);
else
    % The GUI is no longer waiting, just close it
    handles.output = [];        % User gave up, return nothing
    guidata(hObject, handles);    delete(handles.figure1);
end

% --- Executes on key press over figure1 with no controls selected.
function figure1_KeyPressFcn(hObject, eventdata, handles)
if isequal(get(hObject,'CurrentKey'),'escape')
    handles.output = [];    % User said no by hitting escape
    guidata(hObject, handles);    uiresume(handles.figure1);
end

% --- Creates and returns a handle to the GUI figure. 
function ml_clip_LayoutFcn(h1,handles);
set(h1,...
'PaperUnits','centimeters',...
'CloseRequestFcn',{@figure1_CloseRequestFcn,handles},...
'Color',get(0,'factoryUicontrolBackgroundColor'),...
'KeyPressFcn',{@figure1_KeyPressFcn,handles},...
'MenuBar','none',...
'Name','ml_clip',...
'NumberTitle','off',...
'Position',[520 722 261 80],...
'Resize','off',...
'Tag','figure1',...
'UserData',[]);

setappdata(h1, 'GUIDEOptions',struct(...
'active_h', [], ...
'taginfo', struct(...
'figure', 2, ...
'pushbutton', 5, ...
'edit', 5, ...
'text', 5), ...
'override', 0, ...
'release', 13, ...
'resize', 'none', ...
'accessibility', 'callback', ...
'mfile', 1, ...
'callbacks', 1, ...
'singleton', 1, ...
'syscolorfig', 1, ...
'lastSavedFile', 'D:\m_gmt\ml_clip.m', ...
'blocking', 0));

h2 = uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@ml_clip_uicallback,h1,'edit_above_Callback'},...
'HorizontalAlignment','left',...
'Position',[10 37 61 21],...
'Style','edit',...
'TooltipString','Grid nodes higher than this will be replaced "Value"',...
'Tag','edit_above');

h3 = uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@ml_clip_uicallback,h1,'edit_Ab_val_Callback'},...
'HorizontalAlignment','left',...
'Position',[73 37 51 21],...
'Style','edit',...
'TooltipString','Grid nodes > "Above" will be replaced by this value (''NaN'' is a valid string)',...
'Tag','edit_Ab_val');

h4 = uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@ml_clip_uicallback,h1,'edit_below_Callback'},...
'HorizontalAlignment','left',...
'Position',[137 37 61 21],...
'Style','edit',...
'TooltipString','Grid nodes lower than this will be replaced "Value"',...
'Tag','edit_below');

h5 = uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@ml_clip_uicallback,h1,'edit_Bl_val_Callback'},...
'HorizontalAlignment','left',...
'Position',[200 37 51 21],...
'Style','edit',...
'TooltipString','Grid nodes < "Below" will be replaced by this value (''NaN'' is a valid string)',...
'Tag','edit_Bl_val');

h6 = uicontrol('Parent',h1,...
'Position',[20 60 41 15],...
'String','Above',...
'Style','text',...
'Tag','text1');

h7 = uicontrol('Parent',h1,...
'Position',[77 60 41 15],...
'String','Value',...
'Style','text',...
'Tag','text2');

h8 = uicontrol('Parent',h1,...
'Position',[148 60 41 15],...
'String','Below',...
'Style','text',...
'Tag','text3');

h9 = uicontrol('Parent',h1,...
'Position',[204 60 41 15],...
'String','Value',...
'Style','text',...
'Tag','text4');

h10 = uicontrol('Parent',h1,...
'Callback',{@ml_clip_uicallback,h1,'pushbutton_OK_Callback'},...
'Position',[105 6 66 23],...
'String','OK',...
'Tag','pushbutton_OK');

h11 = uicontrol('Parent',h1,...
'Callback',{@ml_clip_uicallback,h1,'pushbutton_Cancel_Callback'},...
'Position',[185 6 66 23],...
'String','Cancel',...
'Tag','pushbutton_Cancel');

h12 = uicontrol('Parent',h1,...
'Callback',{@ml_clip_uicallback,h1,'pushbutton_help_Callback'},...
'FontWeight','bold',...
'ForegroundColor',[0 0 1],...
'Position',[10 6 23 23],...
'String','?',...
'Tag','pushbutton_help',...
'Visible','off');

function ml_clip_uicallback(hObject, eventdata, h1, callback_name)
% This function is executed by the callback and than the handles is allways updated.
feval(callback_name,hObject,[],guidata(h1));
