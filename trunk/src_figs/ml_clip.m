function varargout = ml_clip(varargin)
% M-File changed by desGUIDE 
% varargin   command line arguments to ml_clip (see VARARGIN)

%	Copyright (c) 2004-2006 by J. Luis
%
%	This program is free software; you can redistribute it and/or modify
%	it under the terms of the GNU General Public License as published by
%	the Free Software Foundation; version 2 of the License.
%
%	This program is distributed in the hope that it will be useful,
%	but WITHOUT ANY WARRANTY; without even the implied warranty of
%	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%	GNU General Public License for more details.
%
%	Contact info: w3.ualg.pt/~jluis/mirone
% --------------------------------------------------------------------
 
	hObject = figure('Tag','figure1','Visible','off');
	ml_clip_LayoutFcn(hObject);
	handles = guihandles(hObject);
	movegui(hObject,'north')
 
	if ~isempty(varargin)
		handMir  = varargin{1};
		handles.Z = getappdata(handMir.figure1,'dem_z');
	else
        errordlg('GRDCLIP: wrong number of arguments.','Error')
        delete(hObject);    return
	end
    
	if (handMir.no_file)
		errordlg('GRDCLIP: You didn''t even load a file. What are you expecting then?','ERROR')
        delete(hObject);    return
	end
	if (~handMir.validGrid)
        errordlg('GRDCLIP: This operation is deffined only for images derived from DEM grids.','ERROR')
        delete(hObject);    return
	end
	if (isempty(handles.Z))
        errordlg('GRDCLIP: Grid was not saved in memory. Increase "Grid max size" and start over.','ERROR')
        delete(hObject);    return
	end

    handles.hMirFig = handMir.figure1;
	handles.head = handMir.head;
	handles.above_val = [];
	handles.below_val = [];
    handles.z_min = handles.head(5);
    handles.z_max = handles.head(6);
    handles.above = handles.z_max;
    handles.below = handles.z_min;
    
    set(handles.edit_above,'String',sprintf('%.4g',handles.z_max))
    set(handles.edit_below,'String',sprintf('%.4g',handles.z_min))

	guidata(hObject, handles);

	set(hObject,'Visible','on');
	if (nargout),   varargout{1} = hObject;     end

% -------------------------------------------------------------------------------------
function edit_above_Callback(hObject, eventdata, handles)
	xx = str2double(get(hObject,'String'));
	if ~isnan(xx) && xx < handles.z_max,     handles.above = xx;
	else                                    set(hObject,'String',num2str(handles.z_max));
	end
	guidata(hObject,handles)

% -------------------------------------------------------------------------------------
function edit_Ab_val_Callback(hObject, eventdata, handles)
	handles.above_val = str2double(get(hObject,'String'));
	guidata(handles.figure1,handles)

% -------------------------------------------------------------------------------------
function edit_below_Callback(hObject, eventdata, handles)
	xx = str2double(get(hObject,'String'));
	if ~isnan(xx) & xx > handles.z_min,     handles.below = xx;
	else                                    set(hObject,'String',num2str(handles.z_min));
	end
	guidata(hObject,handles)

% -------------------------------------------------------------------------------------
function edit_Bl_val_Callback(hObject, eventdata, handles)
	handles.below_val = str2double(get(hObject,'String'));
	guidata(handles.figure1,handles)

% -------------------------------------------------------------------------------------
function pushbutton_OK_Callback(hObject, eventdata, handles)
	Out{1} = handles.above;             Out{3} = handles.below;
	Out{2} = handles.above_val;         Out{4} = handles.below_val;
    
	if ~isempty(handles.above_val)     % Clip above
        handles.Z(handles.Z > handles.above) = handles.above_val;
    end
	if ~isempty(handles.below_val)     % Clip below
        handles.Z(handles.Z < handles.below) = handles.below_val;
    end

	zz = grdutils(handles.Z,'-L');       handles.head(5:6) = zz(1:2);
    tmp.X = linspace(handles.head(1),handles.head(2),size(handles.Z,2));
    tmp.Y = linspace(handles.head(3),handles.head(4),size(handles.Z,1));
    tmp.head = handles.head;
    tmp.name = 'Cliped grid';
    mirone(handles.Z,tmp);
    delete(handles.figure1)

% -------------------------------------------------------------------------------------
function pushbutton_help_Callback(hObject, eventdata, handles)

% -------------------------------------------------------------------------------------
function figure1_KeyPressFcn(hObject, eventdata)
	if isequal(get(hObject,'CurrentKey'),'escape')
		delete(hObject);
	end

% -------------------------------------------------------------------------------------
% --- Creates and returns a handle to the GUI figure. 
function ml_clip_LayoutFcn(h1);
set(h1,...
'PaperUnits','centimeters',...
'Color',get(0,'factoryUicontrolBackgroundColor'),...
'KeyPressFcn',@figure1_KeyPressFcn,...
'MenuBar','none',...
'Name','ml_clip',...
'NumberTitle','off',...
'Position',[520 722 261 80],...
'Resize','off',...
'Tag','figure1');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@ml_clip_uicallback,h1,'edit_above_Callback'},...
'HorizontalAlignment','left',...
'Position',[10 37 61 21],...
'Style','edit',...
'TooltipString','Grid nodes higher than this will be replaced "Value"',...
'Tag','edit_above');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@ml_clip_uicallback,h1,'edit_Ab_val_Callback'},...
'HorizontalAlignment','left',...
'Position',[73 37 51 21],...
'Style','edit',...
'TooltipString','Grid nodes > "Above" will be replaced by this value (''NaN'' is a valid string)',...
'Tag','edit_Ab_val');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@ml_clip_uicallback,h1,'edit_below_Callback'},...
'HorizontalAlignment','left',...
'Position',[137 37 61 21],...
'Style','edit',...
'TooltipString','Grid nodes lower than this will be replaced "Value"',...
'Tag','edit_below');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@ml_clip_uicallback,h1,'edit_Bl_val_Callback'},...
'HorizontalAlignment','left',...
'Position',[200 37 51 21],...
'Style','edit',...
'TooltipString','Grid nodes < "Below" will be replaced by this value (''NaN'' is a valid string)',...
'Tag','edit_Bl_val');

uicontrol('Parent',h1,...
'Position',[20 60 41 15],...
'String','Above',...
'Style','text',...
'Tag','text1');

uicontrol('Parent',h1,...
'Position',[77 60 41 15],...
'String','Value',...
'Style','text',...
'Tag','text2');

uicontrol('Parent',h1,...
'Position',[148 60 41 15],...
'String','Below',...
'Style','text',...
'Tag','text3');

uicontrol('Parent',h1,...
'Position',[204 60 41 15],...
'String','Value',...
'Style','text',...
'Tag','text4');

uicontrol('Parent',h1,...
'Callback',{@ml_clip_uicallback,h1,'pushbutton_OK_Callback'},...
'Position',[185 6 66 21],...
'String','OK',...
'Tag','pushbutton_OK');

uicontrol('Parent',h1,...
'Callback',{@ml_clip_uicallback,h1,'pushbutton_help_Callback'},...
'FontWeight','bold',...
'ForegroundColor',[0 0 1],...
'Position',[10 6 23 23],...
'String','?',...
'Tag','pushbutton_help',...
'Visible','off');

function ml_clip_uicallback(hObject, eventdata, h1, callback_name)
% This function is executed by the callback and than the handles is allways updated.
feval(callback_name,hObject,[],guidata(h1));
