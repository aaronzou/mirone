function varargout = obj_template_detect(varargin)
% Find objects/shapes in images

%	Copyright (c) 2004-2010 by J. Luis
%
%	This program is free software; you can redistribute it and/or modify
%	it under the terms of the GNU General Public License as published by
%	the Free Software Foundation; version 2 of the License.
%
%	This program is distributed in the hope that it will be useful,
%	but WITHOUT ANY WARRANTY; without even the implied warranty of
%	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%	GNU General Public License for more details.
%
%	Contact info: w3.ualg.pt/~jluis/mirone
% ------------------------------------------------------------------------

	if (isempty(varargin))		return,		end

	hObject = figure('Tag','figure1','Visible','off');
	obj_template_detect_LayoutFcn(hObject);
	handles = guihandles(hObject);

	handles.hMirFig = varargin{1};
	handMir = guidata(handles.hMirFig);
	if (handMir.no_file)
		errordlg('You didn''t even load a file. What are you expecting then?','ERROR')
		delete(hObject);    return
	end
	handles.handMir.axes1 = handMir.axes1;
	handles.handMir.hImg = handMir.hImg;
	handles.handMir.head = handMir.head;
	handles.handMir.DefLineColor = handMir.DefLineColor;
	handles.handMir.DefLineThick = handMir.DefLineThick;
	handles.home_dir = handMir.home_dir;
	handles.last_dir = handMir.last_dir;
	handles.work_dir = handMir.work_dir;

	move2side(handles.hMirFig, hObject)

	handles.scaleFact = 1.1;
	handles.min_neighbors = 2;
	handles.min_size = 30;
	
	handles.hImg = image(uint8(rand(64)*350),'Parent', handles.axes1);
	set(handles.axes1,'XTick',[], 'YTick',[])

	%------------ Give a Pro look (3D) to the frame boxes  -------------------------------
	bgcolor = get(0,'DefaultUicontrolBackgroundColor');
	framecolor = max(min(0.65*bgcolor,[1 1 1]),[0 0 0]);
	frame_size = get(handles.frame1,'Position');
	f_bgc = get(handles.frame1,'BackgroundColor');
	usr_d = get(handles.frame1,'UserData');
	if abs(f_bgc(1)-bgcolor(1)) > 0.01           % When the frame's background color is not the default's
		frame3D(hObject, frame_size, framecolor, f_bgc, usr_d)
	else
		frame3D(hObject, frame_size, framecolor, '', usr_d)
	end

	% Recopy the text fields on top of previously created frames
	h_t = handles.text_OR;
	% This is a destilled minimalist uistack(H,'top')
	Children = findobj(allchild(hObject), 'flat', 'type', 'uicontrol');
	HandleLoc = ismember(Children,h_t);
	Children(HandleLoc) = [];  
	NewOrder = [h_t; Children];		% 'top'
	AllChildren = allchild(hObject);
	AllChildren(ismember(AllChildren,NewOrder)) = NewOrder;
	set(hObject,'Children',AllChildren);
	%------------- END Pro look (3D) -------------------------------------------------------

	% Add this figure handle to the carra?as list
	plugedWin = getappdata(handles.hMirFig,'dependentFigs');
	plugedWin = [plugedWin hObject];
	setappdata(handles.hMirFig,'dependentFigs',plugedWin);

	guidata(hObject, handles);

	set(hObject,'Visible','on');
	if (nargout),   varargout{1} = handles.output;  end

% ----------------------------------------------------------------------------------
function push_loadTemplate_CB(hObject, handles)
	[FileName,PathName] = put_or_get_file(handles,{ ...
		'*.jpg', 'JPEG image (*.jpg)'; ...
		'*.tif', 'Tagged Image File (*.tif)'; ...
		'*.bmp', 'Windows Bitmap (*.bmp)'; ...
		'*.png', 'Portable Network Graphics(*.png)'; ...
		'*.gif', 'GIF image (*.gif)'; ...
		'*.pcx', 'Windows Paintbrush (*.pcx)'; ...
		'*.ras', 'SUN rasterfile (*.ras)'; ...
		'*.xwd', 'X Windows Dump (*.xwd)'; ...
		'*.*', 'All Files (*.*)'}, ...
		'Select Template image','get');
	if isequal(FileName,0),		return,		end
	[I, cmap] = imread([PathName FileName]);
	handles.hImg = image(I,'Parent', handles.axes1);
	set(handles.axes1,'XTick',[], 'YTick',[])
	if (ndims(I) == 2 && isempty(cmap)),	cmap = gray(256);	end
	if (~isempty(cmap)),	set(handles.figure1, 'Colormap', cmap),		end
	
	% Compute implanting image aspect ratio and set axes 'PlotBoxAspectRatio' to it
	ip_aspect = size(I,1) / size(I,2);
	set(handles.axes1,'PlotBoxAspectRatio',[1 ip_aspect 1])
	guidata(handles.figure1, handles)

% ----------------------------------------------------------------------------------
function push_matchTemplate_CB(hObject, handles)
	template = get(handles.hImg,'CData');
	target = get(handles.handMir.hImg,'CData');
	if (ndims(target) == 2 && ndims(template) == 3)
		target = ind2rgb8(target, get(handles.hMirFig,'Colormap'));
	elseif (ndims(target) == 3 && ndims(template) == 2)
		template = ind2rgb8(template, get(handles.figure1,'Colormap'));
	end
	str = get(handles.popupmenu1,'String');
	method = str{get(handles.popupmenu1,'Val')};
	rect = match_template(target, template, method);
	
	x = round( localAxes2pix(size(target,2),handles.handMir.head(1:2), rect(:,2)) );
	y = round( localAxes2pix(size(target,1),handles.handMir.head(3:4), rect(:,1)) );

	h = line('XData', x, 'YData', y, 'Parent', handles.handMir.axes1, ...
		'Color',handles.handMir.DefLineColor, 'LineWidth', handles.handMir.DefLineThick);
	draw_funs(h,'line_uicontext')

% ----------------------------------------------------------------------------------
function edit_haarFile_CB(hObject, handles)

% ----------------------------------------------------------------------------------
function push_haarFile_CB(hObject, handles)
	str1 = {'*.xml;*.XML', 'Data file (*.xml,*.XML)';'*.*', 'All Files (*.*)'};
	[FileName,PathName] = put_or_get_file(handles,str1,'Select input cascade training file','get');
	if isequal(FileName,0),		return,		end
	set(handles.edit_haarFile, 'String', [PathName FileName])

% ----------------------------------------------------------------------------------
function push_help_CB(hObject, handles)
	msgbox('Sorry, but for the time being you will have to consult the OpenCV man pages of "MatchTemplate" and/or "HaarDetectObjects"')

% ----------------------------------------------------------------------------------
function edit_scaleFact_CB(hObject, handles)
	xx = str2double(get(hObject,'String'));
	if (isnan(xx) || xx < 0.1)
		set(hObject, 'String', handles.scaleFact),		return
	else
		handles.scaleFact = xx;
		guidata(handles.figure1, handles)
	end

% ----------------------------------------------------------------------------------
function edit_minNeighbors_CB(hObject, handles)
	xx = round(str2double(get(hObject,'String')));
	if (isnan(xx) || xx < 0)
		set(hObject, 'String', handles.min_neighbors),	return
	else
		handles.min_neighbors = xx;
		guidata(handles.figure1, handles)
	end

% ----------------------------------------------------------------------------------
function edit_minSize_CB(hObject, handles)
	xx = round(str2double(get(hObject,'String')));
	if (isnan(xx) || xx < 5)
		set(hObject, 'String', handles.min_size),	return
	else
		handles.min_size = xx;
		guidata(handles.figure1, handles)
	end

% ----------------------------------------------------------------------------------
function push_detectObj_CB(hObject, handles)
	fname = get(handles.edit_haarFile, 'String');
	if (~exist(fname, 'file'))
		errordlg('The intended XML cascade file ... does not exist. Bye Bye.','Error')
		return
	end
	img = get(handles.handMir.hImg,'CData');

	set(handles.figure1,'pointer','watch')
	objs = cvlib_mex('haar', img, fname, handles.scaleFact, handles.min_neighbors, handles.min_size);
	set(handles.figure1,'pointer','arrow')

	for (k = 1:size(objs,1))
		rect = [objs(k,1) objs(k,2); objs(k,1)+objs(k,3) objs(k,2); objs(k,1)+objs(k,3) objs(k,2)+objs(k,4); ...
			objs(k,1) objs(k,2)+objs(k,4); objs(k,1) objs(k,2)];
		h = line('XData', rect(:,1), 'YData', rect(:,2), 'Parent', handles.handMir.axes1, ...
			'Color',handles.handMir.DefLineColor, 'LineWidth', handles.handMir.DefLineThick);
		draw_funs(h,'line_uicontext')
	end

% ----------------------------------------------------------------------------------
function [rect, result] = match_template(target, template, method)

	[map, min_loc, max_loc] = cvlib_mex('matchtemplate', target, template, method);

	i = double(max_loc(1));
	j = double(max_loc(2));
	r2 = size(template, 1);
	c2 = size(template, 2);

	rect = [i		j; ...
			i+r2-1	j; ...
			i+r2-1	j+c2-1; ...
			i		j+c2-1; ...
			i		j];

	if (nargout == 2)
		result = target;
		result(i:i+r2-1, j)=255;
		result(i:i+r2-1, j+c2-1)=255;
		result(i, j:j+c2-1)=255;
		result(i+r2-1, j:j+c2-1)=255;
	end

% ----------------------------------------------------------------------------------
function pixelx = localAxes2pix(dim, x, axesx)
%   Convert axes coordinates to pixel coordinates.
%   PIXELX = AXES2PIX(DIM, X, AXESX) converts axes coordinates
%   (as returned by get(gca, 'CurrentPoint'), for example) into
%   pixel coordinates.  X should be the vector returned by
%   X = get(image_handle, 'XData') (or 'YData').  DIM is the
%   number of image columns for the x coordinate, or the number
%   of image rows for the y coordinate.

	xfirst = x(1);      xlast = x(max(size(x)));	
	if (dim == 1)
        pixelx = axesx - xfirst + 1;        return;
	end
	xslope = (dim - 1) / (xlast - xfirst);
	if ((xslope == 1) && (xfirst == 1))
        pixelx = axesx;
	else
        pixelx = xslope * (axesx - xfirst) + 1;
	end


% --- Creates and returns a handle to the GUI figure. 
function obj_template_detect_LayoutFcn(h1)

set(h1,...
'Color',get(0,'factoryUicontrolBackgroundColor'),...
'MenuBar','none',...
'Name','Object-Template Detector',...
'NumberTitle','off',...
'Position',[521 379 375 286],...
'Resize','off',...
'HandleVisibility','callback',...
'Tag','figure1');

uicontrol('Parent',h1,...
'FontName','Helvetica',...
'HorizontalAlignment','left',...
'Position',[280 40 50 15],...
'String','Min size',...
'Style','text',...
'Tag','text4');

axes('Parent',h1,...
'Units','pixels',...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'Position',[4 151 141 131],...
'Tag','axes1');

uicontrol('Parent',h1,...
'FontName','Helvetica',...
'HorizontalAlignment','right',...
'Position',[125 38 80 15],...
'String','Min neighbors',...
'Style','text');

uicontrol('Parent',h1,...
'FontName','Helvetica',...
'HorizontalAlignment','left',...
'Position',[6 38 70 15],...
'String','Scale factor',...
'Style','text');

uicontrol('Parent',h1,...
'Position',[5 118 363 3],...
'Style','frame',...
'Tag','frame1');

uicontrol('Parent',h1,...
'Call',{@obj_template_detect_uiCB,h1,'push_matchTemplate_CB'},...
'FontName','Helvetica',...
'Position',[160 152 141 21],...
'String','Match Template',...
'Tag','push_matchTemplate');

uicontrol('Parent',h1,...
'Call',{@obj_template_detect_uiCB,h1,'push_loadTemplate_CB'},...
'FontName','Helvetica',...
'Position',[160 196 141 21],...
'String','Load Template image',...
'TooltipString','Load the template image',...
'Tag','push_loadTemplate');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',{@obj_template_detect_uiCB,h1,'edit_haarFile_CB'},...
'HorizontalAlignment','left',...
'Position',[5 65 341 21],...
'Style','edit',...
'Tag','edit_haarFile');

uicontrol('Parent',h1,...
'Call',{@obj_template_detect_uiCB,h1,'push_haarFile_CB'},...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','bold',...
'Position',[345 64 23 23],...
'String','...',...
'Tag','push_haarFile');

uicontrol('Parent',h1,...
'FontName','Helvetica',...
'HorizontalAlignment','left',...
'Position',[6 87 171 15],...
'String','XML file with the Haar cascade',...
'Style','text',...
'Tag','text1');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',{@obj_template_detect_uiCB,h1,'edit_scaleFact_CB'},...
'Position',[72 35 41 21],...
'String','1.1',...
'Style','edit',...
'Tag','edit_scaleFact');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',{@obj_template_detect_uiCB,h1,'edit_minNeighbors_CB'},...
'Position',[207 35 41 21],...
'String','2',...
'Style','edit',...
'Tag','edit_minNeighbors');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Call',{@obj_template_detect_uiCB,h1,'edit_minSize_CB'},...
'Position',[327 35 41 21],...
'String','30',...
'Style','edit',...
'Tag','edit_minSize');

uicontrol('Parent',h1,...
'Call',{@obj_template_detect_uiCB,h1,'push_detectObj_CB'},...
'FontName','Helvetica',...
'Position',[95 4 181 21],...
'String','Detect Objects',...
'TooltipString','Do it.',...
'Tag','push_detectObj');

uicontrol('Parent',h1,...
'FontName','Helvetica',...
'Position',[9 135 130 15],...
'String','Template image',...
'Style','text');

uicontrol('Parent',h1,...
'FontName','helvetica',...
'FontSize',12,...
'Position',[139 108 160 22],...
'String','OR - object detection',...
'Style','text',...
'Tag','text_OR');

uicontrol('Parent',h1, 'Position',[160 243 141 22],...
'BackgroundColor',[1 1 1],...
'String',{  'CCORR_NORMED'; 'CCORR'; 'CCOEFF_NORMED'; 'CCOEFF'; 'SQDIFF_NORMED'; 'SQDIFF' },...
'Style','popupmenu',...
'Value',1,...
'Tag','popupmenu1');

uicontrol('Parent',h1,...
'FontName','Helvetica',...
'Position',[161 265 130 15],...
'String','Matching method',...
'Style','text');

uicontrol('Parent',h1,...
'Call',{@obj_template_detect_uiCB,h1,'push_help_CB'},...
'FontName','Helvetica',...
'FontSize',13,...
'FontWeight','bold',...
'ForegroundColor',[0 0 1],...
'Position',[330 151 33 70],...
'String','?',...
'Tag','push_help');

function obj_template_detect_uiCB(hObject, eventdata, h1, callback_name)
% This function is executed by the callback and than the handles is allways updated.
	feval(callback_name,hObject,guidata(h1));
