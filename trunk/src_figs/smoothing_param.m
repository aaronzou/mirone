function varargout = smoothing_param(varargin)
%	Copyright (c) 2004-2006 by J. Luis
%
%	This program is free software; you can redistribute it and/or modify
%	it under the terms of the GNU General Public License as published by
%	the Free Software Foundation; version 2 of the License.
%
%	This program is distributed in the hope that it will be useful,
%	but WITHOUT ANY WARRANTY; without even the implied warranty of
%	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%	GNU General Public License for more details.
%
%	Contact info: w3.ualg.pt/~jluis/mirone
% --------------------------------------------------------------------

	hObject = figure('Tag','figure1','Visible','off');
	smoothing_param_LayoutFcn(hObject);
	handles = guihandles(hObject);
	movegui(hObject,'northeast')

	set(handles.edit_SmoothParam,'String',num2str(varargin{1}))
	set(handles.edit_Xstart,'String',num2str(varargin{2}(1)))
	set(handles.edit_Xstep,'String',num2str(varargin{2}(2)))
	set(handles.edit_Xend,'String',num2str(varargin{2}(3)))
	set([handles.edit_Xstart handles.edit_Xstep handles.edit_Xend], 'Enable', 'off')

	handles.smooth = varargin{1};           handles.smooth_orig = varargin{1};
	handles.Xstart = varargin{2}(1);        handles.Xstart_orig = varargin{2}(1);
	handles.Xstep = varargin{2}(2);         handles.Xstep_orig = varargin{2}(2);
	handles.Xend = varargin{2}(3);          handles.Xend_orig = varargin{2}(3);
	handles.h_parent_Fig = varargin{3};     handles.h_parent_Axes = varargin{4};
	handles.h_dot = varargin{5};			handles.h_lin = varargin{6};

	handles.orig_cor = get(handles.h_dot, 'Color');
	handles.orig_lsty = get(handles.h_dot, 'LineStyle');
	handles.orig_lt = get(handles.h_dot, 'LineWidth');
	set(handles.h_dot,'Marker','.', 'LineStyle', 'none', 'Color', [1 0 0])

	set(hObject,'Visible','on');
	guidata(hObject, handles);
	if (nargout),	varargout{1} = hObject;		end

% ----------------------------------------------------------------------------
function edit_SmoothParam_Callback(hObject, eventdata, handles)
	handles.smooth = str2double(get(hObject,'String'));
	guidata(hObject, handles);

% ----------------------------------------------------------------------------
function edit_Xstart_Callback(hObject, eventdata, handles)
	handles.Xstart = str2double(get(hObject,'String'));
	if (handles.Xstart < handles.Xstart_orig)           % x lower than original x_min is not allowed
		handles.Xstart = handles.Xstart_orig;    set(hObject,'String',num2str(handles.Xstart_orig))
	end
	guidata(hObject, handles);

% ----------------------------------------------------------------------------
function edit_Xstep_Callback(hObject, eventdata, handles)
	handles.Xstep = str2double(get(hObject,'String'));
	guidata(hObject, handles);

% ----------------------------------------------------------------------------
function edit_Xend_Callback(hObject, eventdata, handles)
	handles.Xend = str2double(get(hObject,'String'));
	if (handles.Xend > handles.Xend_orig)           % x higher than original x_max is not allowed
		handles.Xend = handles.Xend_orig;    set(hObject,'String',num2str(handles.Xend_orig))
	end
	guidata(hObject, handles);

% ----------------------------------------------------------------------------
function radio_equiCoord_Callback(hObject, eventdata, handles)
	if (~get(hObject,'Value')),		set(hObject,'Value',1),		return,		end
	set(handles.radio_origCoord,'Val', 0)
	set([handles.edit_Xstart handles.edit_Xstep handles.edit_Xend], 'Enable', 'on')

% ----------------------------------------------------------------------------
function radio_origCoord_Callback(hObject, eventdata, handles)
	if (~get(hObject,'Value')),		set(hObject,'Value',1),		return,		end
	set(handles.radio_equiCoord,'Val', 0)
	set([handles.edit_Xstart handles.edit_Xstep handles.edit_Xend], 'Enable', 'off')

% ----------------------------------------------------------------------------
function push_Apply_Callback(hObject, eventdata, handles)
% Apply the smoothing to the test line
	xx = get(handles.h_dot,'XData');		yy = get(handles.h_dot,'YData');
	if (get(handles.radio_origCoord,'Val'))
		new_x = xx;
	else
		new_x = handles.Xstart:handles.Xstep:handles.Xend;
	end
	y = spl_fun('csaps',xx,yy,handles.smooth,new_x);
	set(handles.h_lin,'XData',new_x,'YData',y);

% ----------------------------------------------------------------------------
function push_applyNreturn_Callback(hObject, eventdata, handles)
% Apply the smoothing to the original line and return
	push_Apply_Callback([], [], handles)
	x = get(handles.h_lin,'XData');		y = get(handles.h_lin,'YData');
	set(handles.h_dot, 'XData',x, 'YData',y, 'LineStyle',handles.orig_lsty, ...
		'Marker','none', 'Color',handles.orig_cor, 'LineWidth',handles.orig_lt)
	delete(handles.h_lin)
	delete(handles.figure1)

% ----------------------------------------------------------------------------
function push_cancel_Callback(hObject, eventdata, handles)
	figure1_CloseRequestFcn(hObject, eventdata)
	
% ----------------------------------------------------------------------------
% --- Executes when user attempts to close figure1.
function figure1_CloseRequestFcn(hObject, eventdata)
	handles = guidata(hObject);
	set(handles.h_dot, 'LineStyle',handles.orig_lsty, 'Marker','none', 'Color',handles.orig_cor, 'LineWidth',handles.orig_lt)
	delete(handles.h_lin)		% Delete test line
	delete(handles.figure1);

% --- Creates and returns a handle to the GUI figure. 
function smoothing_param_LayoutFcn(h1,handles);
set(h1,...
'CloseRequestFcn',@figure1_CloseRequestFcn,...
'Color',get(0,'factoryUicontrolBackgroundColor'),...
'MenuBar','none',...
'Name','Smoothing Params',...
'NumberTitle','off',...
'Position',[520 703 327 75],...
'RendererMode','manual',...
'Resize','off',...
'Tag','figure1');

uicontrol('Parent',h1,...
'Callback',{@smoothing_param_uicallback,h1,'radio_origCoord_Callback'},...
'Position',[74 18 90 15],...
'String','Original pos',...
'Style','radiobutton',...
'TooltipString','Compute solution at original positions',...
'Value',1,...
'Tag','radio_origCoord');

uicontrol('Parent',h1,...
'Callback',{@smoothing_param_uicallback,h1,'radio_equiCoord_Callback'},...
'Position',[74 2 90 15],...
'String','Equispaced',...
'Style','radiobutton',...
'TooltipString','Compute solution on positions determined by X-start/X-step/X-end selected above',...
'Tag','radio_equiCoord');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@smoothing_param_uicallback,h1,'edit_SmoothParam_Callback'},...
'HorizontalAlignment','left',...
'Position',[4 37 121 21],...
'Style','edit',...
'TooltipString','Enter a Smoothing Parameter between [0 1]',...
'Tag','edit_SmoothParam');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@smoothing_param_uicallback,h1,'edit_Xstart_Callback'},...
'Position',[149 37 51 21],...
'Style','edit',...
'TooltipString','Fitting will start at this x min',...
'Tag','edit_Xstart');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@smoothing_param_uicallback,h1,'edit_Xstep_Callback'},...
'Position',[209 37 51 21],...
'Style','edit',...
'TooltipString','x step for linear interpolation between x_min and x_max',...
'Tag','edit_Xstep');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@smoothing_param_uicallback,h1,'edit_Xend_Callback'},...
'Position',[269 37 51 21],...
'Style','edit',...
'TooltipString','Fitting will stop at this x max',...
'Tag','edit_Xend');

uicontrol('Parent',h1,'Position',[150 58 51 15],'String','X-start','Style','text');
uicontrol('Parent',h1,'Position',[209 58 51 15],'String','X-step','Style','text');
uicontrol('Parent',h1,'Position',[269 58 51 15],'String','X-end','Style','text');
uicontrol('Parent',h1,'Position',[5 58 119 15],'String','Smoothing parameter (p)','Style','text');

uicontrol('Parent',h1,...
'Callback',{@smoothing_param_uicallback,h1,'push_Apply_Callback'},...
'FontName','Helvetica',...
'FontSize',9,...
'Position',[162 6 66 21],...
'String','Apply',...
'TooltipString','Use this for testing',...
'Tag','push_Apply');

uicontrol('Parent',h1,...
'Callback',{@smoothing_param_uicallback,h1,'push_cancel_Callback'},...
'FontName','Helvetica',...
'FontSize',9,...
'Position',[4 7 60 21],...
'String','Cancel',...
'TooltipString','Undo any previous changes and return.',...
'Tag','push_cancel');

uicontrol('Parent',h1,...
'Callback',{@smoothing_param_uicallback,h1,'push_applyNreturn_Callback'},...
'FontName','Helvetica',...
'FontSize',9,...
'Position',[234 6 90 21],...
'String','Apply n return',...
'TooltipString','Do it and go away',...
'Tag','push_applyNreturn');

function smoothing_param_uicallback(hObject, eventdata, h1, callback_name)
% This function is executed by the callback and than the handles is allways updated.
feval(callback_name,hObject,[],guidata(h1));
