function varargout = view_anuga(varargin)
% M-File changed by desGUIDE 

	hObject = figure('Tag','figure1','Visible','off');
	view_anuga_LayoutFcn(hObject);
	handles = guihandles(hObject);
	movegui(hObject,'northeast')

	if (numel(varargin) > 0)
		handles.handMir = varargin{1};
		handles.home_dir = handles.handMir.home_dir;
		handles.last_dir = handles.handMir.last_dir;
		handles.work_dir = handles.handMir.work_dir;
        d_path = handles.handMir.path_data;
	else
		handles.home_dir = cd;
		handles.last_dir = handles.home_dir;
		handles.work_dir = handles.home_dir;
		handles.handMir = [];
        d_path = [pwd filesep 'data' filesep];
	end

	% Import icon
	load([d_path 'mirone_icons.mat'],'Mfopen_ico');
	set(handles.push_swwName,'CData',Mfopen_ico)
	clear Mfopen_ico;

	handles.fname = [];
	handles.sliceNumber = 0;
	handles.first = true;
	handles.one_or_zero = 1;
	handles.volumes = [];
	handles.hMirFig = [];
	handles.dms_xinc = 0;
	handles.dms_yinc = 0;
	handles.geog = 0;			% For the time being ANUGA no geoga

	set(handles.popup_derivedVar, 'String', ...
		{'Absolute Velocity (V)'; ...
		'Absolute Momentum (VxD)'; ...
		'Water Depth'; ...
		'Elevation'; ...
		'Froude Number'; ...
		'Velocity Head (V^2 / (2g))'; ...
		'Hazard-RVD (D(1+V^2))' })

	%------------ Give a Pro look (3D) to the frame boxes  -------------------------------
	bgcolor = get(0,'DefaultUicontrolBackgroundColor');
	framecolor = max(min(0.65*bgcolor,[1 1 1]),[0 0 0]);
    frame_size = get(handles.frame1,'Position');
    f_bgc = get(handles.frame1,'BackgroundColor');
    if abs(f_bgc(1)-bgcolor(1)) > 0.01           % When the frame's background color is not the default's
        frame3D(hObject,frame_size,framecolor,f_bgc,[])
    else
        frame3D(hObject,frame_size,framecolor,'',[])
        delete(handles.frame1)
    end

	% Recopy the text fields on top of previously created frames (uistack is to damn slow)
	h_t = handles.text_GLG;
    t_size = get(h_t,'Position');				t_str = get(h_t,'String');    fw = get(h_t,'FontWeight');
    bgc = get (h_t,'BackgroundColor');			fgc = get (h_t,'ForegroundColor');
    t_just = get(h_t,'HorizontalAlignment');	t_tag = get(h_t,'Tag');
    handles.text_GLG = uicontrol('Parent',hObject, 'Style','text', 'Position',t_size,'String',t_str,'Tag',t_tag, ...
        'BackgroundColor',bgc,'ForegroundColor',fgc,'FontWeight',fw, 'HorizontalAlignment',t_just);
	delete(h_t)
	%------------- END Pro look (3D) -------------------------------------------------------

	handles.output = hObject;
	guidata(hObject, handles);

	set(hObject,'Visible','on');
    if (nargout),   varargout{1} = handles.output;     end

% --------------------------------------------------------------------
function radio_stage_Callback(hObject, eventdata, handles)
	if (get(hObject,'Value'))
		set([handles.radio_xmoment handles.radio_ymoment], 'Value', 0)
	else
		set(hObject,'Value', 1)
	end

% --------------------------------------------------------------------
function radio_xmoment_Callback(hObject, eventdata, handles)
	if (get(hObject,'Value'))
		set([handles.radio_stage handles.radio_ymoment], 'Value', 0)
	else
		set(hObject,'Value', 1)
	end

% --------------------------------------------------------------------
function radio_ymoment_Callback(hObject, eventdata, handles)
	if (get(hObject,'Value'))
		set([handles.radio_stage handles.radio_xmoment], 'Value', 0)
	else
		set(hObject,'Value', 1)
	end

% --------------------------------------------------------------------
function check_derivedVar_Callback(hObject, eventdata, handles)
	if (get(hObject,'Value'))
		set([handles.radio_stage handles.radio_xmoment handles.radio_ymoment], 'Enable', 'off')
		set(handles.popup_derivedVar, 'Enable', 'on')
	else
		set([handles.radio_stage handles.radio_xmoment handles.radio_ymoment], 'Enable', 'on')
		set(handles.popup_derivedVar, 'Enable', 'off')
	end

% --------------------------------------------------------------------
function popup_derivedVar_Callback(hObject, eventdata, handles)

% -----------------------------------------------------------------------------------------
function slider1_Callback(hObject, eventdata, handles)
	handles.sliceNumber = round(get(handles.slider1,'Value')) - 1;
	set(handles.edit_sliceNumber,'String', handles.sliceNumber+1)		% Update slice nº box
	if (get(handles.checkbox_now,'Val'))
		set(handles.figure1,'pointer','watch')
		push_showSlice_Callback([], [], handles)		% and update image (also saves handles)
		set(handles.figure1,'pointer','arrow')
	else
	    guidata(handles.figure1,handles)
	end

% -----------------------------------------------------------------------------------------
function edit_sliceNumber_Callback(hObject, eventdata, handles)
	xx = fix(str2double(get(hObject,'String')));		% Make sure its an int
	if (isnan(xx) || xx < 1 || xx > handles.number_of_timesteps)
		handles.sliceNumber = 0;		set(hObject,'String','1')
	else
		set(hObject,'String',xx);		set(handles.slider1,'Val',xx)		% Update slider
		handles.sliceNumber = xx - 1;
	end
    guidata(handles.figure1,handles)

% -----------------------------------------------------------------------------------------
function edit_swwName_Callback(hObject, eventdata, handles)
    fname = get(hObject,'String');
    push_swwName_Callback([], [], handles, fname)

% -----------------------------------------------------------------------------------------
function push_swwName_Callback(hObject, eventdata, handles, opt)
	% This function does quite some work. It reads and extract relevant info from the netCDF file
    if (nargin == 3)        % Direct call
        cd(handles.last_dir)
    	str1 = {'*.sww;*.SWW;', 'Data files (*.sww,*.SWW)';'*.*', 'All Files (*.*)'};
        [FileName,PathName] = uigetfile(str1,'sww file');
        cd(handles.home_dir);
	    if isequal(FileName,0),		return,		end
        if (PathName ~= 0),         handles.last_dir = PathName;    end
    else        % File name on input
        [PathName,FNAME,EXT] = fileparts(opt);
        PathName = [PathName filesep];      % To be coherent with the 'if' branch
        FileName = [FNAME EXT];
    end
	pause(0.01);	handles.fname = [PathName FileName];
	
	if (exist(handles.fname, 'file') ~= 2)
		errordlg(['File: ' handles.fname ' does not exist.'],'Error')
		handles.fname = [];
		return
	end
    set(handles.edit_swwName,'String',handles.fname)
	
	% ----------------- this make sense when one are reloading a(nother) file ----------
	handles.sliceNumber = 0;
    set(handles.slider1,'Value',1)
    set(handles.edit_sliceNumber,'String','1')
	
	% ---- Maybe the dimensions should be fished out of the "s" structurem as well -----
	% But for now I'll just test that 'number_of_volumes' exists, otherwise ... street
	set(handles.figure1,'pointer','watch')
	s = nc_funs('info',handles.fname);
	attribNames = {s.Attribute.Name};
	ind = strcmp({s.Dimension.Name},'number_of_volumes');
	if (~any(ind))
		errordlg('ERROR: This .sww file is not of recognizable type. For example: "number_of_volumes" was not found.','Error')
		set(handles.figure1,'pointer','arrow')
		return
	end
	
	ind = strcmp(attribNames,'xllcorner');		xllcorner = 0;
	if (any(ind)),	xllcorner = s.Attribute(ind).Value;		end
	ind = strcmp(attribNames,'yllcorner');		yllcorner = 0;
	if (any(ind)),	yllcorner = s.Attribute(ind).Value;		end
	

	% Fill the grid size boxes which imply some parameter guessings
	st = nc_funs('getdiminfo', handles.fname,'number_of_volumes');
	handles.number_of_volumes = st.Length;
	st = nc_funs('getdiminfo', handles.fname,'number_of_points');
	handles.number_of_points = st.Length;
	st = nc_funs('getdiminfo', handles.fname,'number_of_timesteps');
	handles.number_of_timesteps = st.Length;

	% ------------------ OK, Get numerics now -----------------------------------
	handles.x = double(nc_funs('varget', handles.fname, 'x')) + xllcorner;
	handles.y = double(nc_funs('varget', handles.fname, 'y')) + yllcorner;
	handles.time = nc_funs('varget', handles.fname, 'time');
	handles.volumes = nc_funs('varget', handles.fname, 'volumes');
	if (~isa(handles.volumes, 'int32')),	handles.volumes = int32(handles.volumes);	end
	set(handles.figure1,'pointer','arrow')

	epa = eps * 10;
	head = [min(handles.x)-epa max(handles.x)+epa min(handles.y)-epa max(handles.y)+epa 0 1 0];
	set( handles.edit_x_min,'String',sprintf('%.8g',head(1)) )
	set( handles.edit_x_max,'String',sprintf('%.8g',head(2)) )
	set( handles.edit_y_min,'String',sprintf('%.8g',head(3)) )
	set( handles.edit_y_max,'String',sprintf('%.8g',head(4)) )
	handles.x_min = head(1);            handles.x_max = head(2);
	handles.y_min = head(3);            handles.y_max = head(4);
	handles.x_min_or = head(1);         handles.x_max_or = head(2);
	handles.y_min_or = head(3);         handles.y_max_or = head(4);
	
	% --------------- Estimate a "reasonable" proposition for grid size ----------------
	n = round( sqrt(double(handles.number_of_volumes)) );
	inc = ( diff(head(1:2)) + diff(head(3:4)) ) / (2*(n-1));	% A mean dx dy
	set( handles.edit_x_inc,'String',sprintf('%.8g',inc) )
	set( handles.edit_y_inc,'String',sprintf('%.8g',inc) )
	set( handles.edit_Ncols,'String',sprintf('%d',n) )
	set( handles.edit_Nrows,'String',sprintf('%d',n) )
	% Call dim_funs to compute & update the correct size
	dim_funs('xInc', handles.edit_x_inc, handles)
	dim_funs('yInc', handles.edit_y_inc, handles)
	
	handles.head = head;		% INCOMPLETE HEAD. The rest is computed in push_showSlice_Callback()
	
	% Finish slider configurations
	st = [1 10] / (handles.number_of_timesteps - 1);
	set(handles.slider1,'Min',1,'Max',handles.number_of_timesteps,'Val',1,'SliderStep',st) 	
	set(handles.slider1,'Enable','on')
	
	set(handles.edit_sliceNumber,'Enable','on')
	set(handles.text_Info,'String',sprintf('Triangles = %d & Time steps = %d',handles.number_of_volumes,handles.number_of_timesteps))
	
    guidata(handles.figure1,handles)

% -----------------------------------------------------------------------------------------
function push_showSlice_Callback(hObject, eventdata, handles)
	if (isempty(handles.fname))
		errordlg('Hey Lou. What about a walk on the Wild Side? Maybe you''ll find a file there that you can use here!','Chico clever')
		return
	end

	nx = str2double(get(handles.edit_Ncols,'String'));
	ny = str2double(get(handles.edit_Nrows,'String'));
	
	if ( ~get(handles.check_derivedVar,'Val') )			% Get one of the primary quantities
		% Get the ploting variable
		if (get(handles.radio_stage, 'Val')),			theVarName = 'stage';
		elseif (get(handles.radio_xmoment, 'Val'))		theVarName = 'xmomentum';
		elseif (get(handles.radio_ymoment, 'Val'))		theVarName = 'ymomentum';
		end
		theVar = nc_funs('varget', handles.fname, theVarName, [handles.sliceNumber 0], [1 handles.number_of_points]);
	
	else
		theVar = get_derivedVar(handles);
	end
	if (~isa(theVar, 'double')),	theVar = double(theVar);	end		% While we don't f... these doubles as well
	handles.head(5:6) = [min(theVar) max(theVar)];
	
	% create a grid in x and y
	x = linspace(handles.head(1),handles.head(2),nx);
	y = linspace(handles.head(3),handles.head(4),ny);
	Z = mxgridtrimesh(handles.volumes, [handles.x(:) handles.y(:) theVar(:)],x,y);

	handles.head(8) = str2double(get(handles.edit_x_inc,'String'));
	handles.head(9) = str2double(get(handles.edit_y_inc,'String'));

	if (isempty(handles.hMirFig) || ~ishandle(handles.hMirFig))			% First run or killed Mirone window
		tmp.X = x;		tmp.Y = y;		tmp.head = handles.head;
		tmp.name = sprintf('SWW time = %g',handles.time(handles.sliceNumber+1));
		handles.hMirFig = mirone(Z,tmp);
		handles.handMir = guidata(handles.hMirFig);			% Get the handles of the now existing Mirone fig
	else									% We already have a Mirone image. Update it with this new slice
		img = scaleto8(Z);
		handles.handMir = guidata(handles.hMirFig);			% Get updated handles to see if illum has changed
		if ( handles.handMir.Illumin_type >= 1 && handles.handMir.Illumin_type <= 4 )
			illumComm = getappdata(handles.handMir.figure1,'illumComm');
			img = ind2rgb8(img,get(handles.handMir.figure1,'Colormap'));    % z_int is now 3D
            if (handles.handMir.Illumin_type == 1)
                opt_N = sprintf('-Nt1/%.6f/%.6f',handles.handMir.grad_sigma, handles.handMir.grad_offset);
                if (handles.geog),  R = grdgradient_m(Z,handles.head,'-M',illumComm,opt_N);
                else                R = grdgradient_m(Z,handles.head,illumComm,opt_N);
				end
            else
				R = grdgradient_m(Z,handles.head,illumComm);
			end
            img = shading_mat(img,R,'no_scale');			% and now it is illuminated
		end
		set(handles.handMir.hImg, 'CData', img)
		setappdata(handles.handMir.figure1,'dem_z',Z);		% Update grid so that coursor display correct values
		setappdata(handles.handMir.figure1,'dem_x',x);		% Don't get bad surprises if space increments have changed
		setappdata(handles.handMir.figure1,'dem_y',y);
		set(handles.handMir.figure1, 'Name', sprintf('SWW time = %g',handles.time(handles.sliceNumber+1)))
	end
	
    guidata(handles.figure1,handles)
	
	% Save also the updated header in Mirone handles
	handles.handMir.head = handles.head;
    guidata(handles.handMir.figure1,handles.handMir)

% --------------------------------------------------------------------
function theVar = get_derivedVar(handles)
	% Compute a derived quantity from a combination of the primary quantities

	contents = get(handles.popup_derivedVar, 'String');
	qual = contents{get(handles.popup_derivedVar,'Value')};
	switch qual(1:min(numel(qual),11))
		case {'Absolute Ve' 'Froude Numb'}			% Absolute Velocity (V) || Froude Number
			x = nc_funs('varget', handles.fname, 'xmomentum', [handles.sliceNumber 0], [1 handles.number_of_points]);
			y = nc_funs('varget', handles.fname, 'ymomentum', [handles.sliceNumber 0], [1 handles.number_of_points]);
			if (~isa(x, 'double')),		x = double(x);		y = double(y);		end
			theVar = sqrt(x.^2 + y.^2);
			x = nc_funs('varget', handles.fname, 'stage', [handles.sliceNumber 0], [1 handles.number_of_points]);
			y = nc_funs('varget', handles.fname, 'elevation')';
			if (~isa(x, 'double')),		x = double(x);		y = double(y);		end
			theVar = theVar ./ (x - y + 1e-6);
			if ( strcmp(qual(1:6), 'Froude') )
				theVar = theVar ./ sqrt( 9.8 * (x - y + 1e-6) );
			end
		case 'Absolute Mo'			% Absolute Momentum (VxD)
			x = nc_funs('varget', handles.fname, 'xmomentum', [handles.sliceNumber 0], [1 handles.number_of_points]);
			y = nc_funs('varget', handles.fname, 'ymomentum', [handles.sliceNumber 0], [1 handles.number_of_points]);
			if (~isa(x, 'double')),		x = double(x);		y = double(y);		end
			theVar = sqrt(x.^2 + y.^2);
		case 'Elevation'			% Elevation
			theVar = nc_funs('varget', handles.fname, 'elevation')';
		case 'Water Depth'			% Water Depth
			stage = nc_funs('varget', handles.fname, 'stage', [handles.sliceNumber 0], [1 handles.number_of_points]);
			elevation = nc_funs('varget', handles.fname, 'elevation')';
			if (~isa(stage, 'double')),		stage = double(stage);		elevation = double(elevation);		end
			theVar = (stage - elevation);
		case {'Velocity He' 'Hazard-RVD '}			% Velocity Head (V^2 / (2g)) || D * (1 + V^2)
			x = nc_funs('varget', handles.fname, 'xmomentum', [handles.sliceNumber 0], [1 handles.number_of_points]);
			y = nc_funs('varget', handles.fname, 'ymomentum', [handles.sliceNumber 0], [1 handles.number_of_points]);
			if (~isa(x, 'double')),		x = double(x);		y = double(y);		end
			theVar = (x.^2 + y.^2);		% = D^2 * V^2
			x = nc_funs('varget', handles.fname, 'stage', [handles.sliceNumber 0], [1 handles.number_of_points]);
			y = nc_funs('varget', handles.fname, 'elevation')';
			if (~isa(x, 'double')),		x = double(x);		y = double(y);		end
			D = (x - y + 1e-6);
			clear x y;
			if (qual(1) == 'V')
				D = D .* D;
				theVar = theVar ./ (2 * 9.8 * D);
			else
				theVar = D + theVar ./ D;		% = D * (1 + V^2)
			end
	end

% --------------------------------------------------------------------
function push_showMesh_Callback(hObject, eventdata, handles)
	
	if (isempty(handles.fname)),	errordlg('Go to ... #!?-#$%}','#!?-#$%}'),	return,		end

	% Get the 'stage' vector
	stage = nc_funs('varget', handles.fname, 'stage', [handles.sliceNumber 0], [1 handles.number_of_points]);
	h = figure;
	trisurf(double(handles.volumes)+1,double(stage(:)),double(handles.x(:)),double(handles.y(:)),'facecolor',[.9 .8 .6],'edgecolor','k');
	axis image, view(90,0), axis vis3d, axis off, zoom_j(1.5)

% -------------------------------------------------------------------------------------
function edit_x_min_Callback(hObject, eventdata, handles)
	dim_funs('xMin', hObject, handles)

% -------------------------------------------------------------------------------------
function edit_x_max_Callback(hObject, eventdata, handles)
	dim_funs('xMax', hObject, handles)

% --------------------------------------------------------------------
function edit_y_min_Callback(hObject, eventdata, handles)
	dim_funs('yMin', hObject, handles)

% --------------------------------------------------------------------
function edit_y_max_Callback(hObject, eventdata, handles)
	dim_funs('yMax', hObject, handles)

% --------------------------------------------------------------------
function edit_x_inc_Callback(hObject, eventdata, handles)
	dim_funs('xInc', hObject, handles)

% --------------------------------------------------------------------
function edit_Ncols_Callback(hObject, eventdata, handles)
	dim_funs('nCols', hObject, handles)

% --------------------------------------------------------------------
function edit_y_inc_Callback(hObject, eventdata, handles)
	dim_funs('yInc', hObject, handles)

% --------------------------------------------------------------------
function edit_Nrows_Callback(hObject, eventdata, handles)
	dim_funs('nRows', hObject, handles)

% --------------------------------------------------------------------
function push_Help_Callback(hObject, eventdata, handles)


% --------------------------------------------------------------------
function push_Cancel_Callback(hObject, eventdata, handles)
	delete(handles.figure1)


% --- Creates and returns a handle to the GUI figure. 
function view_anuga_LayoutFcn(h1);

set(h1,...
'Position',[520 548 350 330],...
'Color',get(0,'factoryUicontrolBackgroundColor'),...
'MenuBar','none',...
'Name','View ANUGA',...
'NumberTitle','off',...
'PaperSize',[20.98404194812 29.67743169791],...
'Resize','off',...
'Tag','figure1');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[10 204 331 38],...
'Style','frame',...
'Tag','frame3');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[10 242 331 35],...
'Style','frame',...
'Tag','frame2');

uicontrol('Parent',h1,...
'HorizontalAlignment','left',...
'Position',[299 177 40 15],...
'String','Slice nº',...
'Style','text',...
'Tag','text3');

uicontrol('Parent',h1,...
'BackgroundColor',[0.99 0.99 0.993],...
'Callback',{@view_anuga_uicallback,h1,'slider1_Callback'},...
'Enable','inactive',...
'Position',[10 159 291 17],...
'Style','slider',...
'Tag','slider1');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_swwName_Callback'},...
'HorizontalAlignment','left',...
'Position',[10 288 310 21],...
'Style','edit',...
'TooltipString','Name of .sww file',...
'Tag','edit_swwName');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'push_swwName_Callback'},...
'Position',[320 288 21 21],...
'TooltipString','Browse for a sww file name',...
'Tag','push_swwName');

uicontrol('Parent',h1,...
'FontName','Helvetica',...
'FontSize',9,...
'FontWeight','bold',...
'HorizontalAlignment','left',...
'Position',[10 311 100 17],...
'String','Input sww file',...
'Style','text',...
'Tag','text1');

uicontrol('Parent',h1,...
'Position',[10 179 70 15],...
'String','Real time',...
'Style','checkbox',...
'TooltipString','If checked, using the slider automaticaly updates the new slice image',...
'Value',1,...
'Tag','checkbox_now');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'push_showSlice_Callback'},...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','bold',...
'Position',[240 7 100 23],...
'String','Show slice',...
'TooltipString','Extract the slice selected in "Slice nº" and shot it in a Mirone window',...
'Tag','push_showSlice');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[10 40 331 97],...
'Style','frame',...
'Tag','frame1');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[30 130 121 15],...
'String','Griding Line Geometry',...
'Style','text',...
'Tag','text_GLG');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_x_max_Callback'},...
'HorizontalAlignment','left',...
'Position',[126 98 75 21],...
'Style','edit',...
'Tag','edit_x_max');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_y_max_Callback'},...
'HorizontalAlignment','left',...
'Position',[126 72 75 21],...
'Style','edit',...
'Tag','edit_y_max');

uicontrol('Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[18 102 30 15],...
'String','X Dir',...
'Style','text',...
'Tag','text5');

uicontrol('Parent',h1,...
'Enable','inactive',...
'HorizontalAlignment','left',...
'Position',[17 76 30 15],...
'String','Y Dir',...
'Style','text',...
'Tag','text6');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[146 119 41 13],...
'String','Max',...
'Style','text',...
'Tag','text7');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[67 119 41 13],...
'String','Min',...
'Style','text',...
'Tag','text8');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_x_inc_Callback'},...
'HorizontalAlignment','left',...
'Position',[206 98 71 21],...
'Style','edit',...
'TooltipString','DX grid spacing',...
'Tag','edit_x_inc');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_y_inc_Callback'},...
'HorizontalAlignment','left',...
'Position',[206 72 71 21],...
'Style','edit',...
'TooltipString','DY grid spacing',...
'Tag','edit_y_inc');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_Ncols_Callback'},...
'HorizontalAlignment','left',...
'Position',[282 98 50 21],...
'Style','edit',...
'TooltipString','Number of columns in the grid',...
'Tag','edit_Ncols');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_Nrows_Callback'},...
'HorizontalAlignment','left',...
'Position',[282 72 50 21],...
'Style','edit',...
'TooltipString','Number of rows in the grid',...
'Tag','edit_Nrows');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[223 121 41 13],...
'String','Spacing',...
'Style','text',...
'Tag','text9');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[285 121 51 13],...
'String','# of lines',...
'Style','text',...
'Tag','text10');

uicontrol('Parent',h1,...
'BackgroundColor',[0.83137 0.81569 0.78431],...
'Callback',{@view_anuga_uicallback,h1,'push_Help_Callback'},...
'FontWeight','bold',...
'ForegroundColor',[0 0 1],...
'Position',[275 47 61 18],...
'String','?',...
'Tag','push_Help');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_x_min_Callback'},...
'HorizontalAlignment','left',...
'Position',[45 98 75 21],...
'Style','edit',...
'Tag','edit_x_min');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_y_min_Callback'},...
'HorizontalAlignment','left',...
'Position',[45 73 75 21],...
'Style','edit',...
'Tag','edit_y_min');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'push_showMesh_Callback'},...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','bold',...
'Position',[120 7 100 23],...
'String','Show mesh',...
'TooltipString','Show the mesh triangulation used in simulation',...
'Tag','push_showMesh');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'push_Cancel_Callback'},...
'FontName','Helvetica',...
'FontSize',10,...
'Position',[20 7 80 23],...
'String','Cancel',...
'Tag','push_Cancel');

uicontrol('Parent',h1,...
'FontSize',9,...
'HorizontalAlignment','left',...
'Position',[140 312 200 16],...
'String','Info',...
'Style','text',...
'Tag','text_Info');

uicontrol('Parent',h1,...
'BackgroundColor',[1 1 1],...
'Callback',{@view_anuga_uicallback,h1,'edit_sliceNumber_Callback'},...
'Enable','inactive',...
'Position',[300 158 40 20],...
'String','1',...
'Style','edit',...
'Tag','edit_sliceNumber');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'radio_stage_Callback'},...
'Position',[17 252 50 15],...
'String','Stage',...
'Style','radiobutton',...
'TooltipString','Plot the "stage" variable',...
'Value',1,...
'Tag','radio_stage');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'radio_xmoment_Callback'},...
'Position',[116 252 85 15],...
'String','Xmomentum',...
'Style','radiobutton',...
'TooltipString','Plot the "xmomentum" variable',...
'Tag','radio_xmoment');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'radio_ymoment_Callback'},...
'Position',[243 252 80 15],...
'String','Ymomentum',...
'Style','radiobutton',...
'TooltipString','Plot the "ymomentum" variable',...
'Tag','radio_ymoment');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'popup_derivedVar_Callback'},...
'BackgroundColor',[1 1 1],...
'Enable','off',...
'Position',[111 211 200 22],...
'Style','popupmenu',...
'Value',1,...
'Tag','popup_derivedVar');

uicontrol('Parent',h1,...
'Callback',{@view_anuga_uicallback,h1,'check_derivedVar_Callback'},...
'Position',[18 214 80 15],...
'String','Derived var',...
'Style','checkbox',...
'TooltipString','Select a derived quantity from the side popup menu',...
'Tag','check_derivedVar');

uicontrol('Parent',h1,...
'Enable','inactive',...
'Position',[40 269 100 15],...
'String','Primary quantities',...
'Style','text',...
'Tag','text_Pq');

function view_anuga_uicallback(hObject, eventdata, h1, callback_name)
% This function is executed by the callback and than the handles is allways updated.
feval(callback_name,hObject,[],guidata(h1));
