function defFilters_struct = load_defFilters
% Define a structure called LinConvFilt with the filter coefficients.
% To add more fields (to host more filters) see how LinConvFilt is
% created and proceed. After don't forget to update the "nomes" and
% "texto" cell arrays. The "texto" contains the filter descriptive that
% is shown at the bottom of DigitalFiltering_gui figure. If you
% don't have any descriptive text you must still provide a empty entry.
% See comments before the cell arrays initialization.

LinConvFilt.UserDefFilt.LowPass.MovAverage = ones(5,5);
%LinConvFilt.UserDefFilt.LowPass.DistWeight = eye(5,5);
[x,y] = meshgrid(-2:2,-2:2);
h = sqrt(x.*x + y.*y);
h(3,3) = 1;             % To avoid devide by zero warnings
h = 1 ./ h;
h(3,3) = 2;             % Central weight
LinConvFilt.UserDefFilt.LowPass.InvDist = h;
h     = exp(-(x.*x + y.*y)/(2*1*1));
h(h < eps*max(h(:))) = 0;
LinConvFilt.UserDefFilt.LowPass.GaussLowPass = h;
tmp = zeros(5);     tmp(3,3) = 1;
LinConvFilt.UserDefFilt.GeneralUD = tmp;

% ------------------------

LinConvFilt.PreDefFilters.LowPassG.Gauss = [1 2 1; 2 4 2; 1 2 1];
LinConvFilt.PreDefFilters.LowPassG.FiveNodeP = [0 1 0; 1 1 1; 0 1 0];
LinConvFilt.PreDefFilters.LowPassG.FiveNodeT = [1 0 1; 0 1 0; 1 0 1];
LinConvFilt.PreDefFilters.LowPassG.NineNode = ones(3,3);
LinConvFilt.PreDefFilters.LowPassG.LowPass1 = [1 1 1; 1 2 1; 1 1 1];
LinConvFilt.PreDefFilters.LowPassG.LowPass2 = [1 1 1; 1 4 1; 1 1 1];
LinConvFilt.PreDefFilters.LowPassG.LowPass3 = [1 1 1; 1 12 1; 1 1 1];

LinConvFilt.PreDefFilters.HighPass.MeanRemov = [-1 -1 -1; -1 9 -1; -1 -1 -1];
LinConvFilt.PreDefFilters.HighPass.HighPass1 = [0 -1 0; -1 5 -1; 0 -1 0];
LinConvFilt.PreDefFilters.HighPass.HighPass2 = [1 -2 1; -2 5 -2; 1 -2 1];
LinConvFilt.PreDefFilters.HighPass.HighPass3 = [0 -1 0; -1 20 -1; 0 -1 0];

LinConvFilt.PreDefFilters.Order1Der.RobRowDetect = [-1 0 0; 0 1 0; 0 0 0];
LinConvFilt.PreDefFilters.Order1Der.RobColDetect = [0 0 -1; 0 1 0; 0 0 0];
LinConvFilt.PreDefFilters.Order1Der.PreRowDetect = [1 0 -1; 1 0 -1; 1 0 -1];
LinConvFilt.PreDefFilters.Order1Der.PreColDetect = [-1 -1 -1; 0 0 0; 1 1 1];
LinConvFilt.PreDefFilters.Order1Der.SobRowDetect = [1 0 -1; 2 0 -2; 1 0 -1];
LinConvFilt.PreDefFilters.Order1Der.SobColDetect = [-1 -2 -1; 0 0 0; 1 2 1];
LinConvFilt.PreDefFilters.Order1Der.FreiRowDetect = [1 0 -1; sqrt(2) 0 -sqrt(2); 1 0 -1];
LinConvFilt.PreDefFilters.Order1Der.FreiColDetect = [-1 -sqrt(2) -1; 0 0 0; 1 sqrt(2) 1];

LinConvFilt.PreDefFilters.Order2Der.Lapla1 = [0 -1 0; -1 4 -1; 0 -1 0];
LinConvFilt.PreDefFilters.Order2Der.Lapla2 = [-1 -1 -1; -1 8 -1; -1 -1 -1];
LinConvFilt.PreDefFilters.Order2Der.Lapla3 = [1 -2 1; -2 4 -2; 1 -2 1];
LinConvFilt.PreDefFilters.Order2Der.Lapla4 = [-1 0 -1; 0 4 0; -1 0 -1];
LinConvFilt.PreDefFilters.Order2Der.LapDif = [0 -1 0; -1 5 -1; 0 -1 0];
LinConvFilt.PreDefFilters.Order2Der.DifGauss = [0 0 -1 -1 -1 0 0; 0 -2 -3 -3 -3 -2 0; -1 -3 5 5 5 -3 -1;...
     -1 -3 5 16 5 -3 -1; -1 -3 5 5 5 -3 -1; 0 -2 -3 -3 -3 -2 0; 0 0 -1 -1 -1 0 0];

LinConvFilt.PreDefFilters.ShiftDif.Horiz = [0 -1 0; 0 1 0; 0 0 0];
LinConvFilt.PreDefFilters.ShiftDif.Vert = [0 0 0; -1 1 0; 0 0 0];

LinConvFilt.PreDefFilters.GradDir.G_E = [-1 1 1; -1 -2 1; -1 1 1];
LinConvFilt.PreDefFilters.GradDir.G_SE = [-1 -1 1; -1 -2 1; 1 1 1];
LinConvFilt.PreDefFilters.GradDir.G_S = [-1 -1 -1; 1 -2 1; 1 1 1];
LinConvFilt.PreDefFilters.GradDir.G_SW = [1 -1 -1; 1 -2 -1; 1 1 1];
LinConvFilt.PreDefFilters.GradDir.G_W = [1 1 -1; 1 -2 -1; 1 1 -1];
LinConvFilt.PreDefFilters.GradDir.G_NW = [1 1 1; 1 -2 -1; 1 -1 -1];
LinConvFilt.PreDefFilters.GradDir.G_N = [1 1 1; 1 -2 1; -1 -1 -1];
LinConvFilt.PreDefFilters.GradDir.G_NE = [1 1 1; -1 -2 1; -1 -1 1];

LinConvFilt.PreDefFilters.Emboss.E_E = [-1 0 1; -1 1 1; -1 0 1];
LinConvFilt.PreDefFilters.Emboss.E_SE = [-1 -1 0; -1 1 1; 0 1 1];
LinConvFilt.PreDefFilters.Emboss.E_S = [-1 -1 -1; 0 1 0; 1 1 1];
LinConvFilt.PreDefFilters.Emboss.E_SW = [0 -1 -1; 1 1 -1; 1 1 0];
LinConvFilt.PreDefFilters.Emboss.E_W = [1 0 -1; 1 1 -1; 1 0 -1];
LinConvFilt.PreDefFilters.Emboss.E_NW = [1 1 0; 1 1 -1; 0 -1 -1];
LinConvFilt.PreDefFilters.Emboss.E_N = [1 1 1; 0 1 0; -1 -1 -1];
LinConvFilt.PreDefFilters.Emboss.E_NE = [0 1 1; -1 1 1; -1 -1 0];

% First column contains the struct field name, second the name that will
% show up in the tree. Notice how the first column cuincides with the
% LinConvFilt structure fieldnames. This aspect is crutial.
nomes = {'Linear Convolution filters' 'Linear Convolution filters';...  % The first must always repeat
        'UserDefFilt' 'User defined'; ...
        'LowPass' 'Low-pass filters'; ...
        'MovAverage' 'Moving Average (mxn)'; ...
        'InvDist' 'Inverse Distance (mxn)';...
        'GaussLowPass' 'Gaussian Low-pass (mxn)';...
        'GeneralUD' 'General User-defined (mxn)';...
        'PreDefFilters' 'Predefined Filters';...
        'LowPassG' 'Low-pass Filters';...
        'Gauss' 'Gaussian (3x3)';...
        'FiveNodeP' '5-node + Averaging (3x3)';...
        'FiveNodeT' '5-node X Averaging (3x3)';...
        'NineNode' '9-node Averaging (3x3)';...
        'LowPass1' 'Low-pass 1 (3x3)';...
        'LowPass2' 'Low-pass 2 (3x3)';...
        'LowPass3' 'Low-pass 3 (3x3)';...
        'HighPass' 'High-pass Filters';...
        'MeanRemov' 'Mean Removal (3x3)';...
        'HighPass1' 'High-pass 1 (3x3)';...
        'HighPass2' 'High-pass 2 (3x3)';...
        'HighPass3' 'High-pass 3 (3x3)';...
        'Order1Der' '1 Order Derivative Filters';...
        'RobRowDetect' 'Roberts Row Detector 3 (3x3)';...
        'RobColDetect' 'Roberts Col Detector 3 (3x3)';...
        'PreRowDetect' 'Prewitt Row Detector 3 (3x3)';...
        'PreColDetect' 'Prewitt Col Detector 3 (3x3)';...
        'SobRowDetect' 'Sobel Row Detector 3 (3x3)';...
        'SobColDetect' 'Sobel Col Detector 3 (3x3)';...
        'FreiRowDetect' 'FreiChen Row Detector 3 (3x3)';...
        'FreiColDetect' 'FreiChen Col Detector 3 (3x3)';...
        'Order2Der' '2 Order Derivative Filters';...
        'Lapla1' 'Laplacian 1 (3x3)';...
        'Lapla2' 'Laplacian 2 (3x3)';...
        'Lapla3' 'Laplacian 3 (3x3)';...
        'Lapla4' 'Laplacian 4 (3x3)';...
        'LapDif' 'Laplacian difference (3x3)';...
        'DifGauss' 'Difference of Gaussian (7x7)';...
        'ShiftDif' 'Shift and Difference Filters';...
        'Horiz' 'Horizontal (3x3)';...
        'Vert' 'Vertical (3x3)';...
        'GradDir' 'Gradient Directional Filters';...
        'G_E' 'East (3x3)';...
        'G_SE' 'Southeast (3x3)';...
        'G_S' 'South (3x3)';...
        'G_SW' 'Southwest (3x3)';...
        'G_W' 'West (3x3)';...
        'G_NW' 'Northwest (3x3)';...
        'G_N' 'North (3x3)';...
        'G_NE' 'Northeast (3x3)';...
        'Emboss' 'Embossing Filters';...
        'E_E' 'East (3x3)';...
        'E_SE' 'Southeast (3x3)';...
        'E_S' 'South (3x3)';...
        'E_SW' 'Southwest (3x3)';...
        'E_W' 'West (3x3)';...
        'E_NW' 'Northwest (3x3)';...
        'E_N' 'North (3x3)';...
        'E_NE' 'Northeast (3x3)';...
    };

% Descriptive text that will show in a textbox. The number of elements must
% be exactly equal to 'nomes'
texto = {'Output nodes are weighted sums of neighboring nodal values.';...
        'User defined, variale size, rectangular neighborhoods.';...
        'Block out higher frequencies and reduce noise.';...
        'Moving average in a rectangular neighborhood.';...
        'Iso-weight contours are concentric ellipses.';...
        'Weights form a 2D bell-shaped curve.';...
        'User defined linear convolution filter.';...
        'Fixed size and predefined weights.';...
        'Block out higher frequencies and reduce noise.';...
        'Small version of the gaussian low-pass filter.';...
        'N-S-E-W moving average.';...
        'X pattern moving average.';...
        'Moving average in small square neighborhood.';...
        '';...
        '';...
        '';...
        'Amplify higher frequencies.';...
        'Remove local mean.';...
        '';...
        '';...
        '';...
        'Common gradient-based filters for finding horizontal and vertical edges.';...
        '';...
        '';...
        '';...
        '';...
        '';...
        '';...
        '';...
        '';...
        'Common second order derivative edge localization filters.';...
        '';...
        '';...
        '';...
        '';...
        '';...
        '';...
        'Subtract a spatially shifted copy of the grid from the original grid.';...
        'Enhance horizontal edges.';...
        'Enhance veertical edges.';...
        'Highlight areas of rapid changes -- i.e. high slopes.';...
        ''; ''; ''; ''; ''; ''; ''; '';
        'Directional edge enhancement (''embossing'') filters.';...
        ''; ''; ''; ''; ''; ''; ''; '';
    };

defFilters_struct = {'Linear Convolution filters'; LinConvFilt; nomes; texto};
